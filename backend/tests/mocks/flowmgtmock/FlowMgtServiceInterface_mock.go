// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package flowmgtmock

import (
	"github.com/asgardeo/thunder/internal/flow/common/model"
	mock "github.com/stretchr/testify/mock"
)

// NewFlowMgtServiceInterfaceMock creates a new instance of FlowMgtServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlowMgtServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlowMgtServiceInterfaceMock {
	mock := &FlowMgtServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FlowMgtServiceInterfaceMock is an autogenerated mock type for the FlowMgtServiceInterface type
type FlowMgtServiceInterfaceMock struct {
	mock.Mock
}

type FlowMgtServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FlowMgtServiceInterfaceMock) EXPECT() *FlowMgtServiceInterfaceMock_Expecter {
	return &FlowMgtServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// GetGraph provides a mock function for the type FlowMgtServiceInterfaceMock
func (_mock *FlowMgtServiceInterfaceMock) GetGraph(graphID string) (model.GraphInterface, bool) {
	ret := _mock.Called(graphID)

	if len(ret) == 0 {
		panic("no return value specified for GetGraph")
	}

	var r0 model.GraphInterface
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(string) (model.GraphInterface, bool)); ok {
		return returnFunc(graphID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) model.GraphInterface); ok {
		r0 = returnFunc(graphID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.GraphInterface)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) bool); ok {
		r1 = returnFunc(graphID)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// FlowMgtServiceInterfaceMock_GetGraph_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGraph'
type FlowMgtServiceInterfaceMock_GetGraph_Call struct {
	*mock.Call
}

// GetGraph is a helper method to define mock.On call
//   - graphID string
func (_e *FlowMgtServiceInterfaceMock_Expecter) GetGraph(graphID interface{}) *FlowMgtServiceInterfaceMock_GetGraph_Call {
	return &FlowMgtServiceInterfaceMock_GetGraph_Call{Call: _e.mock.On("GetGraph", graphID)}
}

func (_c *FlowMgtServiceInterfaceMock_GetGraph_Call) Run(run func(graphID string)) *FlowMgtServiceInterfaceMock_GetGraph_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FlowMgtServiceInterfaceMock_GetGraph_Call) Return(graphInterface model.GraphInterface, b bool) *FlowMgtServiceInterfaceMock_GetGraph_Call {
	_c.Call.Return(graphInterface, b)
	return _c
}

func (_c *FlowMgtServiceInterfaceMock_GetGraph_Call) RunAndReturn(run func(graphID string) (model.GraphInterface, bool)) *FlowMgtServiceInterfaceMock_GetGraph_Call {
	_c.Call.Return(run)
	return _c
}

// IsValidGraphID provides a mock function for the type FlowMgtServiceInterfaceMock
func (_mock *FlowMgtServiceInterfaceMock) IsValidGraphID(graphID string) bool {
	ret := _mock.Called(graphID)

	if len(ret) == 0 {
		panic("no return value specified for IsValidGraphID")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(graphID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// FlowMgtServiceInterfaceMock_IsValidGraphID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidGraphID'
type FlowMgtServiceInterfaceMock_IsValidGraphID_Call struct {
	*mock.Call
}

// IsValidGraphID is a helper method to define mock.On call
//   - graphID string
func (_e *FlowMgtServiceInterfaceMock_Expecter) IsValidGraphID(graphID interface{}) *FlowMgtServiceInterfaceMock_IsValidGraphID_Call {
	return &FlowMgtServiceInterfaceMock_IsValidGraphID_Call{Call: _e.mock.On("IsValidGraphID", graphID)}
}

func (_c *FlowMgtServiceInterfaceMock_IsValidGraphID_Call) Run(run func(graphID string)) *FlowMgtServiceInterfaceMock_IsValidGraphID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FlowMgtServiceInterfaceMock_IsValidGraphID_Call) Return(b bool) *FlowMgtServiceInterfaceMock_IsValidGraphID_Call {
	_c.Call.Return(b)
	return _c
}

func (_c *FlowMgtServiceInterfaceMock_IsValidGraphID_Call) RunAndReturn(run func(graphID string) bool) *FlowMgtServiceInterfaceMock_IsValidGraphID_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterGraph provides a mock function for the type FlowMgtServiceInterfaceMock
func (_mock *FlowMgtServiceInterfaceMock) RegisterGraph(graphID string, g model.GraphInterface) {
	_mock.Called(graphID, g)
	return
}

// FlowMgtServiceInterfaceMock_RegisterGraph_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterGraph'
type FlowMgtServiceInterfaceMock_RegisterGraph_Call struct {
	*mock.Call
}

// RegisterGraph is a helper method to define mock.On call
//   - graphID string
//   - g model.GraphInterface
func (_e *FlowMgtServiceInterfaceMock_Expecter) RegisterGraph(graphID interface{}, g interface{}) *FlowMgtServiceInterfaceMock_RegisterGraph_Call {
	return &FlowMgtServiceInterfaceMock_RegisterGraph_Call{Call: _e.mock.On("RegisterGraph", graphID, g)}
}

func (_c *FlowMgtServiceInterfaceMock_RegisterGraph_Call) Run(run func(graphID string, g model.GraphInterface)) *FlowMgtServiceInterfaceMock_RegisterGraph_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 model.GraphInterface
		if args[1] != nil {
			arg1 = args[1].(model.GraphInterface)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FlowMgtServiceInterfaceMock_RegisterGraph_Call) Return() *FlowMgtServiceInterfaceMock_RegisterGraph_Call {
	_c.Call.Return()
	return _c
}

func (_c *FlowMgtServiceInterfaceMock_RegisterGraph_Call) RunAndReturn(run func(graphID string, g model.GraphInterface)) *FlowMgtServiceInterfaceMock_RegisterGraph_Call {
	_c.Run(run)
	return _c
}
