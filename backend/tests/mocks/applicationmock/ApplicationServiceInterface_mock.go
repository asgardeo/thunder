// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package applicationmock

import (
	"github.com/asgardeo/thunder/internal/application/model"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	mock "github.com/stretchr/testify/mock"
)

// NewApplicationServiceInterfaceMock creates a new instance of ApplicationServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewApplicationServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationServiceInterfaceMock {
	mock := &ApplicationServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// ApplicationServiceInterfaceMock is an autogenerated mock type for the ApplicationServiceInterface type
type ApplicationServiceInterfaceMock struct {
	mock.Mock
}

type ApplicationServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ApplicationServiceInterfaceMock) EXPECT() *ApplicationServiceInterfaceMock_Expecter {
	return &ApplicationServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// CreateApplication provides a mock function for the type ApplicationServiceInterfaceMock
func (_mock *ApplicationServiceInterfaceMock) CreateApplication(app *model.ApplicationDTO) (*model.ApplicationDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(app)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *model.ApplicationDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(*model.ApplicationDTO) (*model.ApplicationDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(app)
	}
	if returnFunc, ok := ret.Get(0).(func(*model.ApplicationDTO) *model.ApplicationDTO); ok {
		r0 = returnFunc(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*model.ApplicationDTO) *serviceerror.ServiceError); ok {
		r1 = returnFunc(app)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// ApplicationServiceInterfaceMock_CreateApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateApplication'
type ApplicationServiceInterfaceMock_CreateApplication_Call struct {
	*mock.Call
}

// CreateApplication is a helper method to define mock.On call
//   - app *model.ApplicationDTO
func (_e *ApplicationServiceInterfaceMock_Expecter) CreateApplication(app interface{}) *ApplicationServiceInterfaceMock_CreateApplication_Call {
	return &ApplicationServiceInterfaceMock_CreateApplication_Call{Call: _e.mock.On("CreateApplication", app)}
}

func (_c *ApplicationServiceInterfaceMock_CreateApplication_Call) Run(run func(app *model.ApplicationDTO)) *ApplicationServiceInterfaceMock_CreateApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.ApplicationDTO
		if args[0] != nil {
			arg0 = args[0].(*model.ApplicationDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ApplicationServiceInterfaceMock_CreateApplication_Call) Return(applicationDTO *model.ApplicationDTO, serviceError *serviceerror.ServiceError) *ApplicationServiceInterfaceMock_CreateApplication_Call {
	_c.Call.Return(applicationDTO, serviceError)
	return _c
}

func (_c *ApplicationServiceInterfaceMock_CreateApplication_Call) RunAndReturn(run func(app *model.ApplicationDTO) (*model.ApplicationDTO, *serviceerror.ServiceError)) *ApplicationServiceInterfaceMock_CreateApplication_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteApplication provides a mock function for the type ApplicationServiceInterfaceMock
func (_mock *ApplicationServiceInterfaceMock) DeleteApplication(appID string) *serviceerror.ServiceError {
	ret := _mock.Called(appID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) *serviceerror.ServiceError); ok {
		r0 = returnFunc(appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceerror.ServiceError)
		}
	}
	return r0
}

// ApplicationServiceInterfaceMock_DeleteApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteApplication'
type ApplicationServiceInterfaceMock_DeleteApplication_Call struct {
	*mock.Call
}

// DeleteApplication is a helper method to define mock.On call
//   - appID string
func (_e *ApplicationServiceInterfaceMock_Expecter) DeleteApplication(appID interface{}) *ApplicationServiceInterfaceMock_DeleteApplication_Call {
	return &ApplicationServiceInterfaceMock_DeleteApplication_Call{Call: _e.mock.On("DeleteApplication", appID)}
}

func (_c *ApplicationServiceInterfaceMock_DeleteApplication_Call) Run(run func(appID string)) *ApplicationServiceInterfaceMock_DeleteApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ApplicationServiceInterfaceMock_DeleteApplication_Call) Return(serviceError *serviceerror.ServiceError) *ApplicationServiceInterfaceMock_DeleteApplication_Call {
	_c.Call.Return(serviceError)
	return _c
}

func (_c *ApplicationServiceInterfaceMock_DeleteApplication_Call) RunAndReturn(run func(appID string) *serviceerror.ServiceError) *ApplicationServiceInterfaceMock_DeleteApplication_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplication provides a mock function for the type ApplicationServiceInterfaceMock
func (_mock *ApplicationServiceInterfaceMock) GetApplication(appID string) (*model.ApplicationProcessedDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(appID)

	if len(ret) == 0 {
		panic("no return value specified for GetApplication")
	}

	var r0 *model.ApplicationProcessedDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (*model.ApplicationProcessedDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(appID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.ApplicationProcessedDTO); ok {
		r0 = returnFunc(appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationProcessedDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(appID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// ApplicationServiceInterfaceMock_GetApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplication'
type ApplicationServiceInterfaceMock_GetApplication_Call struct {
	*mock.Call
}

// GetApplication is a helper method to define mock.On call
//   - appID string
func (_e *ApplicationServiceInterfaceMock_Expecter) GetApplication(appID interface{}) *ApplicationServiceInterfaceMock_GetApplication_Call {
	return &ApplicationServiceInterfaceMock_GetApplication_Call{Call: _e.mock.On("GetApplication", appID)}
}

func (_c *ApplicationServiceInterfaceMock_GetApplication_Call) Run(run func(appID string)) *ApplicationServiceInterfaceMock_GetApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ApplicationServiceInterfaceMock_GetApplication_Call) Return(applicationProcessedDTO *model.ApplicationProcessedDTO, serviceError *serviceerror.ServiceError) *ApplicationServiceInterfaceMock_GetApplication_Call {
	_c.Call.Return(applicationProcessedDTO, serviceError)
	return _c
}

func (_c *ApplicationServiceInterfaceMock_GetApplication_Call) RunAndReturn(run func(appID string) (*model.ApplicationProcessedDTO, *serviceerror.ServiceError)) *ApplicationServiceInterfaceMock_GetApplication_Call {
	_c.Call.Return(run)
	return _c
}

// GetApplicationList provides a mock function for the type ApplicationServiceInterfaceMock
func (_mock *ApplicationServiceInterfaceMock) GetApplicationList() (*model.ApplicationListResponse, *serviceerror.ServiceError) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationList")
	}

	var r0 *model.ApplicationListResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func() (*model.ApplicationListResponse, *serviceerror.ServiceError)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *model.ApplicationListResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() *serviceerror.ServiceError); ok {
		r1 = returnFunc()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// ApplicationServiceInterfaceMock_GetApplicationList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetApplicationList'
type ApplicationServiceInterfaceMock_GetApplicationList_Call struct {
	*mock.Call
}

// GetApplicationList is a helper method to define mock.On call
func (_e *ApplicationServiceInterfaceMock_Expecter) GetApplicationList() *ApplicationServiceInterfaceMock_GetApplicationList_Call {
	return &ApplicationServiceInterfaceMock_GetApplicationList_Call{Call: _e.mock.On("GetApplicationList")}
}

func (_c *ApplicationServiceInterfaceMock_GetApplicationList_Call) Run(run func()) *ApplicationServiceInterfaceMock_GetApplicationList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ApplicationServiceInterfaceMock_GetApplicationList_Call) Return(applicationListResponse *model.ApplicationListResponse, serviceError *serviceerror.ServiceError) *ApplicationServiceInterfaceMock_GetApplicationList_Call {
	_c.Call.Return(applicationListResponse, serviceError)
	return _c
}

func (_c *ApplicationServiceInterfaceMock_GetApplicationList_Call) RunAndReturn(run func() (*model.ApplicationListResponse, *serviceerror.ServiceError)) *ApplicationServiceInterfaceMock_GetApplicationList_Call {
	_c.Call.Return(run)
	return _c
}

// GetOAuthApplication provides a mock function for the type ApplicationServiceInterfaceMock
func (_mock *ApplicationServiceInterfaceMock) GetOAuthApplication(clientID string) (*model.OAuthAppConfigProcessedDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(clientID)

	if len(ret) == 0 {
		panic("no return value specified for GetOAuthApplication")
	}

	var r0 *model.OAuthAppConfigProcessedDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (*model.OAuthAppConfigProcessedDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(clientID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *model.OAuthAppConfigProcessedDTO); ok {
		r0 = returnFunc(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OAuthAppConfigProcessedDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(clientID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// ApplicationServiceInterfaceMock_GetOAuthApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOAuthApplication'
type ApplicationServiceInterfaceMock_GetOAuthApplication_Call struct {
	*mock.Call
}

// GetOAuthApplication is a helper method to define mock.On call
//   - clientID string
func (_e *ApplicationServiceInterfaceMock_Expecter) GetOAuthApplication(clientID interface{}) *ApplicationServiceInterfaceMock_GetOAuthApplication_Call {
	return &ApplicationServiceInterfaceMock_GetOAuthApplication_Call{Call: _e.mock.On("GetOAuthApplication", clientID)}
}

func (_c *ApplicationServiceInterfaceMock_GetOAuthApplication_Call) Run(run func(clientID string)) *ApplicationServiceInterfaceMock_GetOAuthApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ApplicationServiceInterfaceMock_GetOAuthApplication_Call) Return(oAuthAppConfigProcessedDTO *model.OAuthAppConfigProcessedDTO, serviceError *serviceerror.ServiceError) *ApplicationServiceInterfaceMock_GetOAuthApplication_Call {
	_c.Call.Return(oAuthAppConfigProcessedDTO, serviceError)
	return _c
}

func (_c *ApplicationServiceInterfaceMock_GetOAuthApplication_Call) RunAndReturn(run func(clientID string) (*model.OAuthAppConfigProcessedDTO, *serviceerror.ServiceError)) *ApplicationServiceInterfaceMock_GetOAuthApplication_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateApplication provides a mock function for the type ApplicationServiceInterfaceMock
func (_mock *ApplicationServiceInterfaceMock) UpdateApplication(appID string, app *model.ApplicationDTO) (*model.ApplicationDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(appID, app)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *model.ApplicationDTO
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, *model.ApplicationDTO) (*model.ApplicationDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(appID, app)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *model.ApplicationDTO) *model.ApplicationDTO); ok {
		r0 = returnFunc(appID, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, *model.ApplicationDTO) *serviceerror.ServiceError); ok {
		r1 = returnFunc(appID, app)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// ApplicationServiceInterfaceMock_UpdateApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateApplication'
type ApplicationServiceInterfaceMock_UpdateApplication_Call struct {
	*mock.Call
}

// UpdateApplication is a helper method to define mock.On call
//   - appID string
//   - app *model.ApplicationDTO
func (_e *ApplicationServiceInterfaceMock_Expecter) UpdateApplication(appID interface{}, app interface{}) *ApplicationServiceInterfaceMock_UpdateApplication_Call {
	return &ApplicationServiceInterfaceMock_UpdateApplication_Call{Call: _e.mock.On("UpdateApplication", appID, app)}
}

func (_c *ApplicationServiceInterfaceMock_UpdateApplication_Call) Run(run func(appID string, app *model.ApplicationDTO)) *ApplicationServiceInterfaceMock_UpdateApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *model.ApplicationDTO
		if args[1] != nil {
			arg1 = args[1].(*model.ApplicationDTO)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *ApplicationServiceInterfaceMock_UpdateApplication_Call) Return(applicationDTO *model.ApplicationDTO, serviceError *serviceerror.ServiceError) *ApplicationServiceInterfaceMock_UpdateApplication_Call {
	_c.Call.Return(applicationDTO, serviceError)
	return _c
}

func (_c *ApplicationServiceInterfaceMock_UpdateApplication_Call) RunAndReturn(run func(appID string, app *model.ApplicationDTO) (*model.ApplicationDTO, *serviceerror.ServiceError)) *ApplicationServiceInterfaceMock_UpdateApplication_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateApplication provides a mock function for the type ApplicationServiceInterfaceMock
func (_mock *ApplicationServiceInterfaceMock) ValidateApplication(app *model.ApplicationDTO) (*model.ApplicationProcessedDTO, *model.InboundAuthConfigDTO, *serviceerror.ServiceError) {
	ret := _mock.Called(app)

	if len(ret) == 0 {
		panic("no return value specified for ValidateApplication")
	}

	var r0 *model.ApplicationProcessedDTO
	var r1 *model.InboundAuthConfigDTO
	var r2 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(*model.ApplicationDTO) (*model.ApplicationProcessedDTO, *model.InboundAuthConfigDTO, *serviceerror.ServiceError)); ok {
		return returnFunc(app)
	}
	if returnFunc, ok := ret.Get(0).(func(*model.ApplicationDTO) *model.ApplicationProcessedDTO); ok {
		r0 = returnFunc(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ApplicationProcessedDTO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*model.ApplicationDTO) *model.InboundAuthConfigDTO); ok {
		r1 = returnFunc(app)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.InboundAuthConfigDTO)
		}
	}
	if returnFunc, ok := ret.Get(2).(func(*model.ApplicationDTO) *serviceerror.ServiceError); ok {
		r2 = returnFunc(app)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*serviceerror.ServiceError)
		}
	}
	return r0, r1, r2
}

// ApplicationServiceInterfaceMock_ValidateApplication_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateApplication'
type ApplicationServiceInterfaceMock_ValidateApplication_Call struct {
	*mock.Call
}

// ValidateApplication is a helper method to define mock.On call
//   - app *model.ApplicationDTO
func (_e *ApplicationServiceInterfaceMock_Expecter) ValidateApplication(app interface{}) *ApplicationServiceInterfaceMock_ValidateApplication_Call {
	return &ApplicationServiceInterfaceMock_ValidateApplication_Call{Call: _e.mock.On("ValidateApplication", app)}
}

func (_c *ApplicationServiceInterfaceMock_ValidateApplication_Call) Run(run func(app *model.ApplicationDTO)) *ApplicationServiceInterfaceMock_ValidateApplication_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.ApplicationDTO
		if args[0] != nil {
			arg0 = args[0].(*model.ApplicationDTO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *ApplicationServiceInterfaceMock_ValidateApplication_Call) Return(applicationProcessedDTO *model.ApplicationProcessedDTO, inboundAuthConfigDTO *model.InboundAuthConfigDTO, serviceError *serviceerror.ServiceError) *ApplicationServiceInterfaceMock_ValidateApplication_Call {
	_c.Call.Return(applicationProcessedDTO, inboundAuthConfigDTO, serviceError)
	return _c
}

func (_c *ApplicationServiceInterfaceMock_ValidateApplication_Call) RunAndReturn(run func(app *model.ApplicationDTO) (*model.ApplicationProcessedDTO, *model.InboundAuthConfigDTO, *serviceerror.ServiceError)) *ApplicationServiceInterfaceMock_ValidateApplication_Call {
	_c.Call.Return(run)
	return _c
}
