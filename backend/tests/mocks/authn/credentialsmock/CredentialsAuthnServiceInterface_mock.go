// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package credentialsmock

import (
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	"github.com/asgardeo/thunder/internal/user"
	mock "github.com/stretchr/testify/mock"
)

// NewCredentialsAuthnServiceInterfaceMock creates a new instance of CredentialsAuthnServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCredentialsAuthnServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *CredentialsAuthnServiceInterfaceMock {
	mock := &CredentialsAuthnServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// CredentialsAuthnServiceInterfaceMock is an autogenerated mock type for the CredentialsAuthnServiceInterface type
type CredentialsAuthnServiceInterfaceMock struct {
	mock.Mock
}

type CredentialsAuthnServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *CredentialsAuthnServiceInterfaceMock) EXPECT() *CredentialsAuthnServiceInterfaceMock_Expecter {
	return &CredentialsAuthnServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function for the type CredentialsAuthnServiceInterfaceMock
func (_mock *CredentialsAuthnServiceInterfaceMock) Authenticate(attributes map[string]interface{}, userType string) (*user.User, *serviceerror.ServiceError) {
	ret := _mock.Called(attributes, userType)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *user.User
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}, string) (*user.User, *serviceerror.ServiceError)); ok {
		return returnFunc(attributes, userType)
	}
	if returnFunc, ok := ret.Get(0).(func(map[string]interface{}, string) *user.User); ok {
		r0 = returnFunc(attributes, userType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(map[string]interface{}, string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(attributes, userType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// CredentialsAuthnServiceInterfaceMock_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type CredentialsAuthnServiceInterfaceMock_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - attributes map[string]interface{}
//   - userType string
func (_e *CredentialsAuthnServiceInterfaceMock_Expecter) Authenticate(attributes interface{}, userType interface{}) *CredentialsAuthnServiceInterfaceMock_Authenticate_Call {
	return &CredentialsAuthnServiceInterfaceMock_Authenticate_Call{Call: _e.mock.On("Authenticate", attributes, userType)}
}

func (_c *CredentialsAuthnServiceInterfaceMock_Authenticate_Call) Run(run func(attributes map[string]interface{}, userType string)) *CredentialsAuthnServiceInterfaceMock_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 map[string]interface{}
		if args[0] != nil {
			arg0 = args[0].(map[string]interface{})
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *CredentialsAuthnServiceInterfaceMock_Authenticate_Call) Return(user1 *user.User, serviceError *serviceerror.ServiceError) *CredentialsAuthnServiceInterfaceMock_Authenticate_Call {
	_c.Call.Return(user1, serviceError)
	return _c
}

func (_c *CredentialsAuthnServiceInterfaceMock_Authenticate_Call) RunAndReturn(run func(attributes map[string]interface{}, userType string) (*user.User, *serviceerror.ServiceError)) *CredentialsAuthnServiceInterfaceMock_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}
