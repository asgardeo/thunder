// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package assertmock

import (
	"github.com/asgardeo/thunder/internal/authn/assert"
	"github.com/asgardeo/thunder/internal/authn/common"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	mock "github.com/stretchr/testify/mock"
)

// NewAuthAssertGeneratorInterfaceMock creates a new instance of AuthAssertGeneratorInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthAssertGeneratorInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthAssertGeneratorInterfaceMock {
	mock := &AuthAssertGeneratorInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// AuthAssertGeneratorInterfaceMock is an autogenerated mock type for the AuthAssertGeneratorInterface type
type AuthAssertGeneratorInterfaceMock struct {
	mock.Mock
}

type AuthAssertGeneratorInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthAssertGeneratorInterfaceMock) EXPECT() *AuthAssertGeneratorInterfaceMock_Expecter {
	return &AuthAssertGeneratorInterfaceMock_Expecter{mock: &_m.Mock}
}

// GenerateAssertion provides a mock function for the type AuthAssertGeneratorInterfaceMock
func (_mock *AuthAssertGeneratorInterfaceMock) GenerateAssertion(authenticators []common.AuthenticatorReference) (*assert.AssertionResult, *serviceerror.ServiceError) {
	ret := _mock.Called(authenticators)

	if len(ret) == 0 {
		panic("no return value specified for GenerateAssertion")
	}

	var r0 *assert.AssertionResult
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func([]common.AuthenticatorReference) (*assert.AssertionResult, *serviceerror.ServiceError)); ok {
		return returnFunc(authenticators)
	}
	if returnFunc, ok := ret.Get(0).(func([]common.AuthenticatorReference) *assert.AssertionResult); ok {
		r0 = returnFunc(authenticators)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assert.AssertionResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]common.AuthenticatorReference) *serviceerror.ServiceError); ok {
		r1 = returnFunc(authenticators)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// AuthAssertGeneratorInterfaceMock_GenerateAssertion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateAssertion'
type AuthAssertGeneratorInterfaceMock_GenerateAssertion_Call struct {
	*mock.Call
}

// GenerateAssertion is a helper method to define mock.On call
//   - authenticators []common.AuthenticatorReference
func (_e *AuthAssertGeneratorInterfaceMock_Expecter) GenerateAssertion(authenticators interface{}) *AuthAssertGeneratorInterfaceMock_GenerateAssertion_Call {
	return &AuthAssertGeneratorInterfaceMock_GenerateAssertion_Call{Call: _e.mock.On("GenerateAssertion", authenticators)}
}

func (_c *AuthAssertGeneratorInterfaceMock_GenerateAssertion_Call) Run(run func(authenticators []common.AuthenticatorReference)) *AuthAssertGeneratorInterfaceMock_GenerateAssertion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []common.AuthenticatorReference
		if args[0] != nil {
			arg0 = args[0].([]common.AuthenticatorReference)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *AuthAssertGeneratorInterfaceMock_GenerateAssertion_Call) Return(assertionResult *assert.AssertionResult, serviceError *serviceerror.ServiceError) *AuthAssertGeneratorInterfaceMock_GenerateAssertion_Call {
	_c.Call.Return(assertionResult, serviceError)
	return _c
}

func (_c *AuthAssertGeneratorInterfaceMock_GenerateAssertion_Call) RunAndReturn(run func(authenticators []common.AuthenticatorReference) (*assert.AssertionResult, *serviceerror.ServiceError)) *AuthAssertGeneratorInterfaceMock_GenerateAssertion_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAssertion provides a mock function for the type AuthAssertGeneratorInterfaceMock
func (_mock *AuthAssertGeneratorInterfaceMock) UpdateAssertion(context *assert.AssuranceContext, authenticator common.AuthenticatorReference) (*assert.AssertionResult, *serviceerror.ServiceError) {
	ret := _mock.Called(context, authenticator)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAssertion")
	}

	var r0 *assert.AssertionResult
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(*assert.AssuranceContext, common.AuthenticatorReference) (*assert.AssertionResult, *serviceerror.ServiceError)); ok {
		return returnFunc(context, authenticator)
	}
	if returnFunc, ok := ret.Get(0).(func(*assert.AssuranceContext, common.AuthenticatorReference) *assert.AssertionResult); ok {
		r0 = returnFunc(context, authenticator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*assert.AssertionResult)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*assert.AssuranceContext, common.AuthenticatorReference) *serviceerror.ServiceError); ok {
		r1 = returnFunc(context, authenticator)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// AuthAssertGeneratorInterfaceMock_UpdateAssertion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAssertion'
type AuthAssertGeneratorInterfaceMock_UpdateAssertion_Call struct {
	*mock.Call
}

// UpdateAssertion is a helper method to define mock.On call
//   - context *assert.AssuranceContext
//   - authenticator common.AuthenticatorReference
func (_e *AuthAssertGeneratorInterfaceMock_Expecter) UpdateAssertion(context interface{}, authenticator interface{}) *AuthAssertGeneratorInterfaceMock_UpdateAssertion_Call {
	return &AuthAssertGeneratorInterfaceMock_UpdateAssertion_Call{Call: _e.mock.On("UpdateAssertion", context, authenticator)}
}

func (_c *AuthAssertGeneratorInterfaceMock_UpdateAssertion_Call) Run(run func(context *assert.AssuranceContext, authenticator common.AuthenticatorReference)) *AuthAssertGeneratorInterfaceMock_UpdateAssertion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *assert.AssuranceContext
		if args[0] != nil {
			arg0 = args[0].(*assert.AssuranceContext)
		}
		var arg1 common.AuthenticatorReference
		if args[1] != nil {
			arg1 = args[1].(common.AuthenticatorReference)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *AuthAssertGeneratorInterfaceMock_UpdateAssertion_Call) Return(assertionResult *assert.AssertionResult, serviceError *serviceerror.ServiceError) *AuthAssertGeneratorInterfaceMock_UpdateAssertion_Call {
	_c.Call.Return(assertionResult, serviceError)
	return _c
}

func (_c *AuthAssertGeneratorInterfaceMock_UpdateAssertion_Call) RunAndReturn(run func(context *assert.AssuranceContext, authenticator common.AuthenticatorReference) (*assert.AssertionResult, *serviceerror.ServiceError)) *AuthAssertGeneratorInterfaceMock_UpdateAssertion_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyAssurance provides a mock function for the type AuthAssertGeneratorInterfaceMock
func (_mock *AuthAssertGeneratorInterfaceMock) VerifyAssurance(context *assert.AssuranceContext, requiredAAL assert.AssuranceLevel, requiredIAL assert.AssuranceLevel) (bool, *serviceerror.ServiceError) {
	ret := _mock.Called(context, requiredAAL, requiredIAL)

	if len(ret) == 0 {
		panic("no return value specified for VerifyAssurance")
	}

	var r0 bool
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(*assert.AssuranceContext, assert.AssuranceLevel, assert.AssuranceLevel) (bool, *serviceerror.ServiceError)); ok {
		return returnFunc(context, requiredAAL, requiredIAL)
	}
	if returnFunc, ok := ret.Get(0).(func(*assert.AssuranceContext, assert.AssuranceLevel, assert.AssuranceLevel) bool); ok {
		r0 = returnFunc(context, requiredAAL, requiredIAL)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(*assert.AssuranceContext, assert.AssuranceLevel, assert.AssuranceLevel) *serviceerror.ServiceError); ok {
		r1 = returnFunc(context, requiredAAL, requiredIAL)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// AuthAssertGeneratorInterfaceMock_VerifyAssurance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyAssurance'
type AuthAssertGeneratorInterfaceMock_VerifyAssurance_Call struct {
	*mock.Call
}

// VerifyAssurance is a helper method to define mock.On call
//   - context *assert.AssuranceContext
//   - requiredAAL assert.AssuranceLevel
//   - requiredIAL assert.AssuranceLevel
func (_e *AuthAssertGeneratorInterfaceMock_Expecter) VerifyAssurance(context interface{}, requiredAAL interface{}, requiredIAL interface{}) *AuthAssertGeneratorInterfaceMock_VerifyAssurance_Call {
	return &AuthAssertGeneratorInterfaceMock_VerifyAssurance_Call{Call: _e.mock.On("VerifyAssurance", context, requiredAAL, requiredIAL)}
}

func (_c *AuthAssertGeneratorInterfaceMock_VerifyAssurance_Call) Run(run func(context *assert.AssuranceContext, requiredAAL assert.AssuranceLevel, requiredIAL assert.AssuranceLevel)) *AuthAssertGeneratorInterfaceMock_VerifyAssurance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *assert.AssuranceContext
		if args[0] != nil {
			arg0 = args[0].(*assert.AssuranceContext)
		}
		var arg1 assert.AssuranceLevel
		if args[1] != nil {
			arg1 = args[1].(assert.AssuranceLevel)
		}
		var arg2 assert.AssuranceLevel
		if args[2] != nil {
			arg2 = args[2].(assert.AssuranceLevel)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *AuthAssertGeneratorInterfaceMock_VerifyAssurance_Call) Return(b bool, serviceError *serviceerror.ServiceError) *AuthAssertGeneratorInterfaceMock_VerifyAssurance_Call {
	_c.Call.Return(b, serviceError)
	return _c
}

func (_c *AuthAssertGeneratorInterfaceMock_VerifyAssurance_Call) RunAndReturn(run func(context *assert.AssuranceContext, requiredAAL assert.AssuranceLevel, requiredIAL assert.AssuranceLevel) (bool, *serviceerror.ServiceError)) *AuthAssertGeneratorInterfaceMock_VerifyAssurance_Call {
	_c.Call.Return(run)
	return _c
}
