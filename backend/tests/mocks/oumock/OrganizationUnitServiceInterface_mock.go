// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package oumock

import (
	"github.com/asgardeo/thunder/internal/ou"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	mock "github.com/stretchr/testify/mock"
)

// NewOrganizationUnitServiceInterfaceMock creates a new instance of OrganizationUnitServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrganizationUnitServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrganizationUnitServiceInterfaceMock {
	mock := &OrganizationUnitServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// OrganizationUnitServiceInterfaceMock is an autogenerated mock type for the OrganizationUnitServiceInterface type
type OrganizationUnitServiceInterfaceMock struct {
	mock.Mock
}

type OrganizationUnitServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *OrganizationUnitServiceInterfaceMock) EXPECT() *OrganizationUnitServiceInterfaceMock_Expecter {
	return &OrganizationUnitServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// CreateOrganizationUnit provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) CreateOrganizationUnit(request ou.OrganizationUnitRequest) (ou.OrganizationUnit, *serviceerror.ServiceError) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationUnit")
	}

	var r0 ou.OrganizationUnit
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(ou.OrganizationUnitRequest) (ou.OrganizationUnit, *serviceerror.ServiceError)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(ou.OrganizationUnitRequest) ou.OrganizationUnit); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Get(0).(ou.OrganizationUnit)
	}
	if returnFunc, ok := ret.Get(1).(func(ou.OrganizationUnitRequest) *serviceerror.ServiceError); ok {
		r1 = returnFunc(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OrganizationUnitServiceInterfaceMock_CreateOrganizationUnit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationUnit'
type OrganizationUnitServiceInterfaceMock_CreateOrganizationUnit_Call struct {
	*mock.Call
}

// CreateOrganizationUnit is a helper method to define mock.On call
//   - request ou.OrganizationUnitRequest
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) CreateOrganizationUnit(request interface{}) *OrganizationUnitServiceInterfaceMock_CreateOrganizationUnit_Call {
	return &OrganizationUnitServiceInterfaceMock_CreateOrganizationUnit_Call{Call: _e.mock.On("CreateOrganizationUnit", request)}
}

func (_c *OrganizationUnitServiceInterfaceMock_CreateOrganizationUnit_Call) Run(run func(request ou.OrganizationUnitRequest)) *OrganizationUnitServiceInterfaceMock_CreateOrganizationUnit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 ou.OrganizationUnitRequest
		if args[0] != nil {
			arg0 = args[0].(ou.OrganizationUnitRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_CreateOrganizationUnit_Call) Return(organizationUnit ou.OrganizationUnit, serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_CreateOrganizationUnit_Call {
	_c.Call.Return(organizationUnit, serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_CreateOrganizationUnit_Call) RunAndReturn(run func(request ou.OrganizationUnitRequest) (ou.OrganizationUnit, *serviceerror.ServiceError)) *OrganizationUnitServiceInterfaceMock_CreateOrganizationUnit_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganizationUnit provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) DeleteOrganizationUnit(id string) *serviceerror.ServiceError {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationUnit")
	}

	var r0 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) *serviceerror.ServiceError); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceerror.ServiceError)
		}
	}
	return r0
}

// OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganizationUnit'
type OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnit_Call struct {
	*mock.Call
}

// DeleteOrganizationUnit is a helper method to define mock.On call
//   - id string
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) DeleteOrganizationUnit(id interface{}) *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnit_Call {
	return &OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnit_Call{Call: _e.mock.On("DeleteOrganizationUnit", id)}
}

func (_c *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnit_Call) Run(run func(id string)) *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnit_Call) Return(serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnit_Call {
	_c.Call.Return(serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnit_Call) RunAndReturn(run func(id string) *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnit_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganizationUnitByPath provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) DeleteOrganizationUnitByPath(handlePath string) *serviceerror.ServiceError {
	ret := _mock.Called(handlePath)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationUnitByPath")
	}

	var r0 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) *serviceerror.ServiceError); ok {
		r0 = returnFunc(handlePath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceerror.ServiceError)
		}
	}
	return r0
}

// OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnitByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganizationUnitByPath'
type OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnitByPath_Call struct {
	*mock.Call
}

// DeleteOrganizationUnitByPath is a helper method to define mock.On call
//   - handlePath string
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) DeleteOrganizationUnitByPath(handlePath interface{}) *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnitByPath_Call {
	return &OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnitByPath_Call{Call: _e.mock.On("DeleteOrganizationUnitByPath", handlePath)}
}

func (_c *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnitByPath_Call) Run(run func(handlePath string)) *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnitByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnitByPath_Call) Return(serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnitByPath_Call {
	_c.Call.Return(serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnitByPath_Call) RunAndReturn(run func(handlePath string) *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_DeleteOrganizationUnitByPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnit provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) GetOrganizationUnit(id string) (ou.OrganizationUnit, *serviceerror.ServiceError) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnit")
	}

	var r0 ou.OrganizationUnit
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (ou.OrganizationUnit, *serviceerror.ServiceError)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) ou.OrganizationUnit); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(ou.OrganizationUnit)
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OrganizationUnitServiceInterfaceMock_GetOrganizationUnit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnit'
type OrganizationUnitServiceInterfaceMock_GetOrganizationUnit_Call struct {
	*mock.Call
}

// GetOrganizationUnit is a helper method to define mock.On call
//   - id string
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) GetOrganizationUnit(id interface{}) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnit_Call {
	return &OrganizationUnitServiceInterfaceMock_GetOrganizationUnit_Call{Call: _e.mock.On("GetOrganizationUnit", id)}
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnit_Call) Run(run func(id string)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnit_Call) Return(organizationUnit ou.OrganizationUnit, serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnit_Call {
	_c.Call.Return(organizationUnit, serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnit_Call) RunAndReturn(run func(id string) (ou.OrganizationUnit, *serviceerror.ServiceError)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnit_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitByPath provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) GetOrganizationUnitByPath(handlePath string) (ou.OrganizationUnit, *serviceerror.ServiceError) {
	ret := _mock.Called(handlePath)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitByPath")
	}

	var r0 ou.OrganizationUnit
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (ou.OrganizationUnit, *serviceerror.ServiceError)); ok {
		return returnFunc(handlePath)
	}
	if returnFunc, ok := ret.Get(0).(func(string) ou.OrganizationUnit); ok {
		r0 = returnFunc(handlePath)
	} else {
		r0 = ret.Get(0).(ou.OrganizationUnit)
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(handlePath)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OrganizationUnitServiceInterfaceMock_GetOrganizationUnitByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitByPath'
type OrganizationUnitServiceInterfaceMock_GetOrganizationUnitByPath_Call struct {
	*mock.Call
}

// GetOrganizationUnitByPath is a helper method to define mock.On call
//   - handlePath string
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) GetOrganizationUnitByPath(handlePath interface{}) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitByPath_Call {
	return &OrganizationUnitServiceInterfaceMock_GetOrganizationUnitByPath_Call{Call: _e.mock.On("GetOrganizationUnitByPath", handlePath)}
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitByPath_Call) Run(run func(handlePath string)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitByPath_Call) Return(organizationUnit ou.OrganizationUnit, serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitByPath_Call {
	_c.Call.Return(organizationUnit, serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitByPath_Call) RunAndReturn(run func(handlePath string) (ou.OrganizationUnit, *serviceerror.ServiceError)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitByPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitChildren provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) GetOrganizationUnitChildren(id string, limit int, offset int) (*ou.OrganizationUnitListResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitChildren")
	}

	var r0 *ou.OrganizationUnitListResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, int, int) (*ou.OrganizationUnitListResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(id, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) *ou.OrganizationUnitListResponse); ok {
		r0 = returnFunc(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ou.OrganizationUnitListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) *serviceerror.ServiceError); ok {
		r1 = returnFunc(id, limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildren_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitChildren'
type OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildren_Call struct {
	*mock.Call
}

// GetOrganizationUnitChildren is a helper method to define mock.On call
//   - id string
//   - limit int
//   - offset int
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) GetOrganizationUnitChildren(id interface{}, limit interface{}, offset interface{}) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildren_Call {
	return &OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildren_Call{Call: _e.mock.On("GetOrganizationUnitChildren", id, limit, offset)}
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildren_Call) Run(run func(id string, limit int, offset int)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildren_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildren_Call) Return(organizationUnitListResponse *ou.OrganizationUnitListResponse, serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildren_Call {
	_c.Call.Return(organizationUnitListResponse, serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildren_Call) RunAndReturn(run func(id string, limit int, offset int) (*ou.OrganizationUnitListResponse, *serviceerror.ServiceError)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildren_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitChildrenByPath provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) GetOrganizationUnitChildrenByPath(handlePath string, limit int, offset int) (*ou.OrganizationUnitListResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(handlePath, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitChildrenByPath")
	}

	var r0 *ou.OrganizationUnitListResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, int, int) (*ou.OrganizationUnitListResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(handlePath, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) *ou.OrganizationUnitListResponse); ok {
		r0 = returnFunc(handlePath, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ou.OrganizationUnitListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) *serviceerror.ServiceError); ok {
		r1 = returnFunc(handlePath, limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildrenByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitChildrenByPath'
type OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildrenByPath_Call struct {
	*mock.Call
}

// GetOrganizationUnitChildrenByPath is a helper method to define mock.On call
//   - handlePath string
//   - limit int
//   - offset int
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) GetOrganizationUnitChildrenByPath(handlePath interface{}, limit interface{}, offset interface{}) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildrenByPath_Call {
	return &OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildrenByPath_Call{Call: _e.mock.On("GetOrganizationUnitChildrenByPath", handlePath, limit, offset)}
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildrenByPath_Call) Run(run func(handlePath string, limit int, offset int)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildrenByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildrenByPath_Call) Return(organizationUnitListResponse *ou.OrganizationUnitListResponse, serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildrenByPath_Call {
	_c.Call.Return(organizationUnitListResponse, serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildrenByPath_Call) RunAndReturn(run func(handlePath string, limit int, offset int) (*ou.OrganizationUnitListResponse, *serviceerror.ServiceError)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitChildrenByPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitGroups provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) GetOrganizationUnitGroups(id string, limit int, offset int) (*ou.GroupListResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitGroups")
	}

	var r0 *ou.GroupListResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, int, int) (*ou.GroupListResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(id, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) *ou.GroupListResponse); ok {
		r0 = returnFunc(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ou.GroupListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) *serviceerror.ServiceError); ok {
		r1 = returnFunc(id, limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitGroups'
type OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroups_Call struct {
	*mock.Call
}

// GetOrganizationUnitGroups is a helper method to define mock.On call
//   - id string
//   - limit int
//   - offset int
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) GetOrganizationUnitGroups(id interface{}, limit interface{}, offset interface{}) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroups_Call {
	return &OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroups_Call{Call: _e.mock.On("GetOrganizationUnitGroups", id, limit, offset)}
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroups_Call) Run(run func(id string, limit int, offset int)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroups_Call) Return(groupListResponse *ou.GroupListResponse, serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroups_Call {
	_c.Call.Return(groupListResponse, serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroups_Call) RunAndReturn(run func(id string, limit int, offset int) (*ou.GroupListResponse, *serviceerror.ServiceError)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroups_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitGroupsByPath provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) GetOrganizationUnitGroupsByPath(handlePath string, limit int, offset int) (*ou.GroupListResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(handlePath, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitGroupsByPath")
	}

	var r0 *ou.GroupListResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, int, int) (*ou.GroupListResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(handlePath, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) *ou.GroupListResponse); ok {
		r0 = returnFunc(handlePath, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ou.GroupListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) *serviceerror.ServiceError); ok {
		r1 = returnFunc(handlePath, limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroupsByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitGroupsByPath'
type OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroupsByPath_Call struct {
	*mock.Call
}

// GetOrganizationUnitGroupsByPath is a helper method to define mock.On call
//   - handlePath string
//   - limit int
//   - offset int
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) GetOrganizationUnitGroupsByPath(handlePath interface{}, limit interface{}, offset interface{}) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroupsByPath_Call {
	return &OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroupsByPath_Call{Call: _e.mock.On("GetOrganizationUnitGroupsByPath", handlePath, limit, offset)}
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroupsByPath_Call) Run(run func(handlePath string, limit int, offset int)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroupsByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroupsByPath_Call) Return(groupListResponse *ou.GroupListResponse, serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroupsByPath_Call {
	_c.Call.Return(groupListResponse, serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroupsByPath_Call) RunAndReturn(run func(handlePath string, limit int, offset int) (*ou.GroupListResponse, *serviceerror.ServiceError)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitGroupsByPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitList provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) GetOrganizationUnitList(limit int, offset int) (*ou.OrganizationUnitListResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitList")
	}

	var r0 *ou.OrganizationUnitListResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(int, int) (*ou.OrganizationUnitListResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) *ou.OrganizationUnitListResponse); ok {
		r0 = returnFunc(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ou.OrganizationUnitListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) *serviceerror.ServiceError); ok {
		r1 = returnFunc(limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OrganizationUnitServiceInterfaceMock_GetOrganizationUnitList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitList'
type OrganizationUnitServiceInterfaceMock_GetOrganizationUnitList_Call struct {
	*mock.Call
}

// GetOrganizationUnitList is a helper method to define mock.On call
//   - limit int
//   - offset int
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) GetOrganizationUnitList(limit interface{}, offset interface{}) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitList_Call {
	return &OrganizationUnitServiceInterfaceMock_GetOrganizationUnitList_Call{Call: _e.mock.On("GetOrganizationUnitList", limit, offset)}
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitList_Call) Run(run func(limit int, offset int)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitList_Call) Return(organizationUnitListResponse *ou.OrganizationUnitListResponse, serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitList_Call {
	_c.Call.Return(organizationUnitListResponse, serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitList_Call) RunAndReturn(run func(limit int, offset int) (*ou.OrganizationUnitListResponse, *serviceerror.ServiceError)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitList_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitUsers provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) GetOrganizationUnitUsers(id string, limit int, offset int) (*ou.UserListResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitUsers")
	}

	var r0 *ou.UserListResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, int, int) (*ou.UserListResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(id, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) *ou.UserListResponse); ok {
		r0 = returnFunc(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ou.UserListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) *serviceerror.ServiceError); ok {
		r1 = returnFunc(id, limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitUsers'
type OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsers_Call struct {
	*mock.Call
}

// GetOrganizationUnitUsers is a helper method to define mock.On call
//   - id string
//   - limit int
//   - offset int
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) GetOrganizationUnitUsers(id interface{}, limit interface{}, offset interface{}) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsers_Call {
	return &OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsers_Call{Call: _e.mock.On("GetOrganizationUnitUsers", id, limit, offset)}
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsers_Call) Run(run func(id string, limit int, offset int)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsers_Call) Return(userListResponse *ou.UserListResponse, serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsers_Call {
	_c.Call.Return(userListResponse, serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsers_Call) RunAndReturn(run func(id string, limit int, offset int) (*ou.UserListResponse, *serviceerror.ServiceError)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitUsersByPath provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) GetOrganizationUnitUsersByPath(handlePath string, limit int, offset int) (*ou.UserListResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(handlePath, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitUsersByPath")
	}

	var r0 *ou.UserListResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, int, int) (*ou.UserListResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(handlePath, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) *ou.UserListResponse); ok {
		r0 = returnFunc(handlePath, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ou.UserListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) *serviceerror.ServiceError); ok {
		r1 = returnFunc(handlePath, limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsersByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitUsersByPath'
type OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsersByPath_Call struct {
	*mock.Call
}

// GetOrganizationUnitUsersByPath is a helper method to define mock.On call
//   - handlePath string
//   - limit int
//   - offset int
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) GetOrganizationUnitUsersByPath(handlePath interface{}, limit interface{}, offset interface{}) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsersByPath_Call {
	return &OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsersByPath_Call{Call: _e.mock.On("GetOrganizationUnitUsersByPath", handlePath, limit, offset)}
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsersByPath_Call) Run(run func(handlePath string, limit int, offset int)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsersByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsersByPath_Call) Return(userListResponse *ou.UserListResponse, serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsersByPath_Call {
	_c.Call.Return(userListResponse, serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsersByPath_Call) RunAndReturn(run func(handlePath string, limit int, offset int) (*ou.UserListResponse, *serviceerror.ServiceError)) *OrganizationUnitServiceInterfaceMock_GetOrganizationUnitUsersByPath_Call {
	_c.Call.Return(run)
	return _c
}

// IsOrganizationUnitExists provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) IsOrganizationUnitExists(id string) (bool, *serviceerror.ServiceError) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsOrganizationUnitExists")
	}

	var r0 bool
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (bool, *serviceerror.ServiceError)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OrganizationUnitServiceInterfaceMock_IsOrganizationUnitExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOrganizationUnitExists'
type OrganizationUnitServiceInterfaceMock_IsOrganizationUnitExists_Call struct {
	*mock.Call
}

// IsOrganizationUnitExists is a helper method to define mock.On call
//   - id string
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) IsOrganizationUnitExists(id interface{}) *OrganizationUnitServiceInterfaceMock_IsOrganizationUnitExists_Call {
	return &OrganizationUnitServiceInterfaceMock_IsOrganizationUnitExists_Call{Call: _e.mock.On("IsOrganizationUnitExists", id)}
}

func (_c *OrganizationUnitServiceInterfaceMock_IsOrganizationUnitExists_Call) Run(run func(id string)) *OrganizationUnitServiceInterfaceMock_IsOrganizationUnitExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_IsOrganizationUnitExists_Call) Return(b bool, serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_IsOrganizationUnitExists_Call {
	_c.Call.Return(b, serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_IsOrganizationUnitExists_Call) RunAndReturn(run func(id string) (bool, *serviceerror.ServiceError)) *OrganizationUnitServiceInterfaceMock_IsOrganizationUnitExists_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationUnit provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) UpdateOrganizationUnit(id string, request ou.OrganizationUnitRequest) (ou.OrganizationUnit, *serviceerror.ServiceError) {
	ret := _mock.Called(id, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationUnit")
	}

	var r0 ou.OrganizationUnit
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, ou.OrganizationUnitRequest) (ou.OrganizationUnit, *serviceerror.ServiceError)); ok {
		return returnFunc(id, request)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ou.OrganizationUnitRequest) ou.OrganizationUnit); ok {
		r0 = returnFunc(id, request)
	} else {
		r0 = ret.Get(0).(ou.OrganizationUnit)
	}
	if returnFunc, ok := ret.Get(1).(func(string, ou.OrganizationUnitRequest) *serviceerror.ServiceError); ok {
		r1 = returnFunc(id, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationUnit'
type OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnit_Call struct {
	*mock.Call
}

// UpdateOrganizationUnit is a helper method to define mock.On call
//   - id string
//   - request ou.OrganizationUnitRequest
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) UpdateOrganizationUnit(id interface{}, request interface{}) *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnit_Call {
	return &OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnit_Call{Call: _e.mock.On("UpdateOrganizationUnit", id, request)}
}

func (_c *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnit_Call) Run(run func(id string, request ou.OrganizationUnitRequest)) *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 ou.OrganizationUnitRequest
		if args[1] != nil {
			arg1 = args[1].(ou.OrganizationUnitRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnit_Call) Return(organizationUnit ou.OrganizationUnit, serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnit_Call {
	_c.Call.Return(organizationUnit, serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnit_Call) RunAndReturn(run func(id string, request ou.OrganizationUnitRequest) (ou.OrganizationUnit, *serviceerror.ServiceError)) *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnit_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationUnitByPath provides a mock function for the type OrganizationUnitServiceInterfaceMock
func (_mock *OrganizationUnitServiceInterfaceMock) UpdateOrganizationUnitByPath(handlePath string, request ou.OrganizationUnitRequest) (ou.OrganizationUnit, *serviceerror.ServiceError) {
	ret := _mock.Called(handlePath, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationUnitByPath")
	}

	var r0 ou.OrganizationUnit
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, ou.OrganizationUnitRequest) (ou.OrganizationUnit, *serviceerror.ServiceError)); ok {
		return returnFunc(handlePath, request)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ou.OrganizationUnitRequest) ou.OrganizationUnit); ok {
		r0 = returnFunc(handlePath, request)
	} else {
		r0 = ret.Get(0).(ou.OrganizationUnit)
	}
	if returnFunc, ok := ret.Get(1).(func(string, ou.OrganizationUnitRequest) *serviceerror.ServiceError); ok {
		r1 = returnFunc(handlePath, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnitByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationUnitByPath'
type OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnitByPath_Call struct {
	*mock.Call
}

// UpdateOrganizationUnitByPath is a helper method to define mock.On call
//   - handlePath string
//   - request ou.OrganizationUnitRequest
func (_e *OrganizationUnitServiceInterfaceMock_Expecter) UpdateOrganizationUnitByPath(handlePath interface{}, request interface{}) *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnitByPath_Call {
	return &OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnitByPath_Call{Call: _e.mock.On("UpdateOrganizationUnitByPath", handlePath, request)}
}

func (_c *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnitByPath_Call) Run(run func(handlePath string, request ou.OrganizationUnitRequest)) *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnitByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 ou.OrganizationUnitRequest
		if args[1] != nil {
			arg1 = args[1].(ou.OrganizationUnitRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnitByPath_Call) Return(organizationUnit ou.OrganizationUnit, serviceError *serviceerror.ServiceError) *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnitByPath_Call {
	_c.Call.Return(organizationUnit, serviceError)
	return _c
}

func (_c *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnitByPath_Call) RunAndReturn(run func(handlePath string, request ou.OrganizationUnitRequest) (ou.OrganizationUnit, *serviceerror.ServiceError)) *OrganizationUnitServiceInterfaceMock_UpdateOrganizationUnitByPath_Call {
	_c.Call.Return(run)
	return _c
}
