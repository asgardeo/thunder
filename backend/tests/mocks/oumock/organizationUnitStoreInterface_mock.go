// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package oumock

import (
	"github.com/asgardeo/thunder/internal/ou"
	mock "github.com/stretchr/testify/mock"
)

// newOrganizationUnitStoreInterfaceMock creates a new instance of organizationUnitStoreInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newOrganizationUnitStoreInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *organizationUnitStoreInterfaceMock {
	mock := &organizationUnitStoreInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// organizationUnitStoreInterfaceMock is an autogenerated mock type for the organizationUnitStoreInterface type
type organizationUnitStoreInterfaceMock struct {
	mock.Mock
}

type organizationUnitStoreInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *organizationUnitStoreInterfaceMock) EXPECT() *organizationUnitStoreInterfaceMock_Expecter {
	return &organizationUnitStoreInterfaceMock_Expecter{mock: &_m.Mock}
}

// CheckOrganizationUnitHandleConflict provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) CheckOrganizationUnitHandleConflict(handle string, parent *string) (bool, error) {
	ret := _mock.Called(handle, parent)

	if len(ret) == 0 {
		panic("no return value specified for CheckOrganizationUnitHandleConflict")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, *string) (bool, error)); ok {
		return returnFunc(handle, parent)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *string) bool); ok {
		r0 = returnFunc(handle, parent)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, *string) error); ok {
		r1 = returnFunc(handle, parent)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_CheckOrganizationUnitHandleConflict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckOrganizationUnitHandleConflict'
type organizationUnitStoreInterfaceMock_CheckOrganizationUnitHandleConflict_Call struct {
	*mock.Call
}

// CheckOrganizationUnitHandleConflict is a helper method to define mock.On call
//   - handle string
//   - parent *string
func (_e *organizationUnitStoreInterfaceMock_Expecter) CheckOrganizationUnitHandleConflict(handle interface{}, parent interface{}) *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHandleConflict_Call {
	return &organizationUnitStoreInterfaceMock_CheckOrganizationUnitHandleConflict_Call{Call: _e.mock.On("CheckOrganizationUnitHandleConflict", handle, parent)}
}

func (_c *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHandleConflict_Call) Run(run func(handle string, parent *string)) *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHandleConflict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *string
		if args[1] != nil {
			arg1 = args[1].(*string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHandleConflict_Call) Return(b bool, err error) *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHandleConflict_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHandleConflict_Call) RunAndReturn(run func(handle string, parent *string) (bool, error)) *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHandleConflict_Call {
	_c.Call.Return(run)
	return _c
}

// CheckOrganizationUnitHasChildResources provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) CheckOrganizationUnitHasChildResources(id string) (bool, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for CheckOrganizationUnitHasChildResources")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_CheckOrganizationUnitHasChildResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckOrganizationUnitHasChildResources'
type organizationUnitStoreInterfaceMock_CheckOrganizationUnitHasChildResources_Call struct {
	*mock.Call
}

// CheckOrganizationUnitHasChildResources is a helper method to define mock.On call
//   - id string
func (_e *organizationUnitStoreInterfaceMock_Expecter) CheckOrganizationUnitHasChildResources(id interface{}) *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHasChildResources_Call {
	return &organizationUnitStoreInterfaceMock_CheckOrganizationUnitHasChildResources_Call{Call: _e.mock.On("CheckOrganizationUnitHasChildResources", id)}
}

func (_c *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHasChildResources_Call) Run(run func(id string)) *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHasChildResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHasChildResources_Call) Return(b bool, err error) *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHasChildResources_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHasChildResources_Call) RunAndReturn(run func(id string) (bool, error)) *organizationUnitStoreInterfaceMock_CheckOrganizationUnitHasChildResources_Call {
	_c.Call.Return(run)
	return _c
}

// CheckOrganizationUnitNameConflict provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) CheckOrganizationUnitNameConflict(name string, parent *string) (bool, error) {
	ret := _mock.Called(name, parent)

	if len(ret) == 0 {
		panic("no return value specified for CheckOrganizationUnitNameConflict")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, *string) (bool, error)); ok {
		return returnFunc(name, parent)
	}
	if returnFunc, ok := ret.Get(0).(func(string, *string) bool); ok {
		r0 = returnFunc(name, parent)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, *string) error); ok {
		r1 = returnFunc(name, parent)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_CheckOrganizationUnitNameConflict_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckOrganizationUnitNameConflict'
type organizationUnitStoreInterfaceMock_CheckOrganizationUnitNameConflict_Call struct {
	*mock.Call
}

// CheckOrganizationUnitNameConflict is a helper method to define mock.On call
//   - name string
//   - parent *string
func (_e *organizationUnitStoreInterfaceMock_Expecter) CheckOrganizationUnitNameConflict(name interface{}, parent interface{}) *organizationUnitStoreInterfaceMock_CheckOrganizationUnitNameConflict_Call {
	return &organizationUnitStoreInterfaceMock_CheckOrganizationUnitNameConflict_Call{Call: _e.mock.On("CheckOrganizationUnitNameConflict", name, parent)}
}

func (_c *organizationUnitStoreInterfaceMock_CheckOrganizationUnitNameConflict_Call) Run(run func(name string, parent *string)) *organizationUnitStoreInterfaceMock_CheckOrganizationUnitNameConflict_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *string
		if args[1] != nil {
			arg1 = args[1].(*string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_CheckOrganizationUnitNameConflict_Call) Return(b bool, err error) *organizationUnitStoreInterfaceMock_CheckOrganizationUnitNameConflict_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_CheckOrganizationUnitNameConflict_Call) RunAndReturn(run func(name string, parent *string) (bool, error)) *organizationUnitStoreInterfaceMock_CheckOrganizationUnitNameConflict_Call {
	_c.Call.Return(run)
	return _c
}

// CreateOrganizationUnit provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) CreateOrganizationUnit(ou1 ou.OrganizationUnit) error {
	ret := _mock.Called(ou1)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganizationUnit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(ou.OrganizationUnit) error); ok {
		r0 = returnFunc(ou1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// organizationUnitStoreInterfaceMock_CreateOrganizationUnit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrganizationUnit'
type organizationUnitStoreInterfaceMock_CreateOrganizationUnit_Call struct {
	*mock.Call
}

// CreateOrganizationUnit is a helper method to define mock.On call
//   - ou1 ou.OrganizationUnit
func (_e *organizationUnitStoreInterfaceMock_Expecter) CreateOrganizationUnit(ou1 interface{}) *organizationUnitStoreInterfaceMock_CreateOrganizationUnit_Call {
	return &organizationUnitStoreInterfaceMock_CreateOrganizationUnit_Call{Call: _e.mock.On("CreateOrganizationUnit", ou1)}
}

func (_c *organizationUnitStoreInterfaceMock_CreateOrganizationUnit_Call) Run(run func(ou1 ou.OrganizationUnit)) *organizationUnitStoreInterfaceMock_CreateOrganizationUnit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 ou.OrganizationUnit
		if args[0] != nil {
			arg0 = args[0].(ou.OrganizationUnit)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_CreateOrganizationUnit_Call) Return(err error) *organizationUnitStoreInterfaceMock_CreateOrganizationUnit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_CreateOrganizationUnit_Call) RunAndReturn(run func(ou1 ou.OrganizationUnit) error) *organizationUnitStoreInterfaceMock_CreateOrganizationUnit_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrganizationUnit provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) DeleteOrganizationUnit(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationUnit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// organizationUnitStoreInterfaceMock_DeleteOrganizationUnit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrganizationUnit'
type organizationUnitStoreInterfaceMock_DeleteOrganizationUnit_Call struct {
	*mock.Call
}

// DeleteOrganizationUnit is a helper method to define mock.On call
//   - id string
func (_e *organizationUnitStoreInterfaceMock_Expecter) DeleteOrganizationUnit(id interface{}) *organizationUnitStoreInterfaceMock_DeleteOrganizationUnit_Call {
	return &organizationUnitStoreInterfaceMock_DeleteOrganizationUnit_Call{Call: _e.mock.On("DeleteOrganizationUnit", id)}
}

func (_c *organizationUnitStoreInterfaceMock_DeleteOrganizationUnit_Call) Run(run func(id string)) *organizationUnitStoreInterfaceMock_DeleteOrganizationUnit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_DeleteOrganizationUnit_Call) Return(err error) *organizationUnitStoreInterfaceMock_DeleteOrganizationUnit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_DeleteOrganizationUnit_Call) RunAndReturn(run func(id string) error) *organizationUnitStoreInterfaceMock_DeleteOrganizationUnit_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnit provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) GetOrganizationUnit(id string) (ou.OrganizationUnit, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnit")
	}

	var r0 ou.OrganizationUnit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (ou.OrganizationUnit, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) ou.OrganizationUnit); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(ou.OrganizationUnit)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_GetOrganizationUnit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnit'
type organizationUnitStoreInterfaceMock_GetOrganizationUnit_Call struct {
	*mock.Call
}

// GetOrganizationUnit is a helper method to define mock.On call
//   - id string
func (_e *organizationUnitStoreInterfaceMock_Expecter) GetOrganizationUnit(id interface{}) *organizationUnitStoreInterfaceMock_GetOrganizationUnit_Call {
	return &organizationUnitStoreInterfaceMock_GetOrganizationUnit_Call{Call: _e.mock.On("GetOrganizationUnit", id)}
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnit_Call) Run(run func(id string)) *organizationUnitStoreInterfaceMock_GetOrganizationUnit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnit_Call) Return(organizationUnit ou.OrganizationUnit, err error) *organizationUnitStoreInterfaceMock_GetOrganizationUnit_Call {
	_c.Call.Return(organizationUnit, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnit_Call) RunAndReturn(run func(id string) (ou.OrganizationUnit, error)) *organizationUnitStoreInterfaceMock_GetOrganizationUnit_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitByPath provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) GetOrganizationUnitByPath(handles []string) (ou.OrganizationUnit, error) {
	ret := _mock.Called(handles)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitByPath")
	}

	var r0 ou.OrganizationUnit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string) (ou.OrganizationUnit, error)); ok {
		return returnFunc(handles)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) ou.OrganizationUnit); ok {
		r0 = returnFunc(handles)
	} else {
		r0 = ret.Get(0).(ou.OrganizationUnit)
	}
	if returnFunc, ok := ret.Get(1).(func([]string) error); ok {
		r1 = returnFunc(handles)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_GetOrganizationUnitByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitByPath'
type organizationUnitStoreInterfaceMock_GetOrganizationUnitByPath_Call struct {
	*mock.Call
}

// GetOrganizationUnitByPath is a helper method to define mock.On call
//   - handles []string
func (_e *organizationUnitStoreInterfaceMock_Expecter) GetOrganizationUnitByPath(handles interface{}) *organizationUnitStoreInterfaceMock_GetOrganizationUnitByPath_Call {
	return &organizationUnitStoreInterfaceMock_GetOrganizationUnitByPath_Call{Call: _e.mock.On("GetOrganizationUnitByPath", handles)}
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitByPath_Call) Run(run func(handles []string)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitByPath_Call) Return(organizationUnit ou.OrganizationUnit, err error) *organizationUnitStoreInterfaceMock_GetOrganizationUnitByPath_Call {
	_c.Call.Return(organizationUnit, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitByPath_Call) RunAndReturn(run func(handles []string) (ou.OrganizationUnit, error)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitByPath_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitChildrenCount provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) GetOrganizationUnitChildrenCount(id string) (int, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitChildrenCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitChildrenCount'
type organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenCount_Call struct {
	*mock.Call
}

// GetOrganizationUnitChildrenCount is a helper method to define mock.On call
//   - id string
func (_e *organizationUnitStoreInterfaceMock_Expecter) GetOrganizationUnitChildrenCount(id interface{}) *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenCount_Call {
	return &organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenCount_Call{Call: _e.mock.On("GetOrganizationUnitChildrenCount", id)}
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenCount_Call) Run(run func(id string)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenCount_Call) Return(n int, err error) *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenCount_Call) RunAndReturn(run func(id string) (int, error)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitChildrenList provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) GetOrganizationUnitChildrenList(id string, limit int, offset int) ([]ou.OrganizationUnitBasic, error) {
	ret := _mock.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitChildrenList")
	}

	var r0 []ou.OrganizationUnitBasic
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) ([]ou.OrganizationUnitBasic, error)); ok {
		return returnFunc(id, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) []ou.OrganizationUnitBasic); ok {
		r0 = returnFunc(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ou.OrganizationUnitBasic)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(id, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitChildrenList'
type organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenList_Call struct {
	*mock.Call
}

// GetOrganizationUnitChildrenList is a helper method to define mock.On call
//   - id string
//   - limit int
//   - offset int
func (_e *organizationUnitStoreInterfaceMock_Expecter) GetOrganizationUnitChildrenList(id interface{}, limit interface{}, offset interface{}) *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenList_Call {
	return &organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenList_Call{Call: _e.mock.On("GetOrganizationUnitChildrenList", id, limit, offset)}
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenList_Call) Run(run func(id string, limit int, offset int)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenList_Call) Return(organizationUnitBasics []ou.OrganizationUnitBasic, err error) *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenList_Call {
	_c.Call.Return(organizationUnitBasics, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenList_Call) RunAndReturn(run func(id string, limit int, offset int) ([]ou.OrganizationUnitBasic, error)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitChildrenList_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitGroupsCount provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) GetOrganizationUnitGroupsCount(id string) (int, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitGroupsCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitGroupsCount'
type organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsCount_Call struct {
	*mock.Call
}

// GetOrganizationUnitGroupsCount is a helper method to define mock.On call
//   - id string
func (_e *organizationUnitStoreInterfaceMock_Expecter) GetOrganizationUnitGroupsCount(id interface{}) *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsCount_Call {
	return &organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsCount_Call{Call: _e.mock.On("GetOrganizationUnitGroupsCount", id)}
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsCount_Call) Run(run func(id string)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsCount_Call) Return(n int, err error) *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsCount_Call) RunAndReturn(run func(id string) (int, error)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitGroupsList provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) GetOrganizationUnitGroupsList(id string, limit int, offset int) ([]ou.Group, error) {
	ret := _mock.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitGroupsList")
	}

	var r0 []ou.Group
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) ([]ou.Group, error)); ok {
		return returnFunc(id, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) []ou.Group); ok {
		r0 = returnFunc(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ou.Group)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(id, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitGroupsList'
type organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsList_Call struct {
	*mock.Call
}

// GetOrganizationUnitGroupsList is a helper method to define mock.On call
//   - id string
//   - limit int
//   - offset int
func (_e *organizationUnitStoreInterfaceMock_Expecter) GetOrganizationUnitGroupsList(id interface{}, limit interface{}, offset interface{}) *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsList_Call {
	return &organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsList_Call{Call: _e.mock.On("GetOrganizationUnitGroupsList", id, limit, offset)}
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsList_Call) Run(run func(id string, limit int, offset int)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsList_Call) Return(groups []ou.Group, err error) *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsList_Call {
	_c.Call.Return(groups, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsList_Call) RunAndReturn(run func(id string, limit int, offset int) ([]ou.Group, error)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitGroupsList_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitList provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) GetOrganizationUnitList(limit int, offset int) ([]ou.OrganizationUnitBasic, error) {
	ret := _mock.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitList")
	}

	var r0 []ou.OrganizationUnitBasic
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int) ([]ou.OrganizationUnitBasic, error)); ok {
		return returnFunc(limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) []ou.OrganizationUnitBasic); ok {
		r0 = returnFunc(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ou.OrganizationUnitBasic)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = returnFunc(limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_GetOrganizationUnitList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitList'
type organizationUnitStoreInterfaceMock_GetOrganizationUnitList_Call struct {
	*mock.Call
}

// GetOrganizationUnitList is a helper method to define mock.On call
//   - limit int
//   - offset int
func (_e *organizationUnitStoreInterfaceMock_Expecter) GetOrganizationUnitList(limit interface{}, offset interface{}) *organizationUnitStoreInterfaceMock_GetOrganizationUnitList_Call {
	return &organizationUnitStoreInterfaceMock_GetOrganizationUnitList_Call{Call: _e.mock.On("GetOrganizationUnitList", limit, offset)}
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitList_Call) Run(run func(limit int, offset int)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitList_Call) Return(organizationUnitBasics []ou.OrganizationUnitBasic, err error) *organizationUnitStoreInterfaceMock_GetOrganizationUnitList_Call {
	_c.Call.Return(organizationUnitBasics, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitList_Call) RunAndReturn(run func(limit int, offset int) ([]ou.OrganizationUnitBasic, error)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitList_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitListCount provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) GetOrganizationUnitListCount() (int, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitListCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_GetOrganizationUnitListCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitListCount'
type organizationUnitStoreInterfaceMock_GetOrganizationUnitListCount_Call struct {
	*mock.Call
}

// GetOrganizationUnitListCount is a helper method to define mock.On call
func (_e *organizationUnitStoreInterfaceMock_Expecter) GetOrganizationUnitListCount() *organizationUnitStoreInterfaceMock_GetOrganizationUnitListCount_Call {
	return &organizationUnitStoreInterfaceMock_GetOrganizationUnitListCount_Call{Call: _e.mock.On("GetOrganizationUnitListCount")}
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitListCount_Call) Run(run func()) *organizationUnitStoreInterfaceMock_GetOrganizationUnitListCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitListCount_Call) Return(n int, err error) *organizationUnitStoreInterfaceMock_GetOrganizationUnitListCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitListCount_Call) RunAndReturn(run func() (int, error)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitListCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitUsersCount provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) GetOrganizationUnitUsersCount(id string) (int, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitUsersCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitUsersCount'
type organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersCount_Call struct {
	*mock.Call
}

// GetOrganizationUnitUsersCount is a helper method to define mock.On call
//   - id string
func (_e *organizationUnitStoreInterfaceMock_Expecter) GetOrganizationUnitUsersCount(id interface{}) *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersCount_Call {
	return &organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersCount_Call{Call: _e.mock.On("GetOrganizationUnitUsersCount", id)}
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersCount_Call) Run(run func(id string)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersCount_Call) Return(n int, err error) *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersCount_Call) RunAndReturn(run func(id string) (int, error)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrganizationUnitUsersList provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) GetOrganizationUnitUsersList(id string, limit int, offset int) ([]ou.User, error) {
	ret := _mock.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationUnitUsersList")
	}

	var r0 []ou.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) ([]ou.User, error)); ok {
		return returnFunc(id, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) []ou.User); ok {
		r0 = returnFunc(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ou.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(id, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrganizationUnitUsersList'
type organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersList_Call struct {
	*mock.Call
}

// GetOrganizationUnitUsersList is a helper method to define mock.On call
//   - id string
//   - limit int
//   - offset int
func (_e *organizationUnitStoreInterfaceMock_Expecter) GetOrganizationUnitUsersList(id interface{}, limit interface{}, offset interface{}) *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersList_Call {
	return &organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersList_Call{Call: _e.mock.On("GetOrganizationUnitUsersList", id, limit, offset)}
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersList_Call) Run(run func(id string, limit int, offset int)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersList_Call) Return(users []ou.User, err error) *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersList_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersList_Call) RunAndReturn(run func(id string, limit int, offset int) ([]ou.User, error)) *organizationUnitStoreInterfaceMock_GetOrganizationUnitUsersList_Call {
	_c.Call.Return(run)
	return _c
}

// IsOrganizationUnitExists provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) IsOrganizationUnitExists(id string) (bool, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsOrganizationUnitExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// organizationUnitStoreInterfaceMock_IsOrganizationUnitExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOrganizationUnitExists'
type organizationUnitStoreInterfaceMock_IsOrganizationUnitExists_Call struct {
	*mock.Call
}

// IsOrganizationUnitExists is a helper method to define mock.On call
//   - id string
func (_e *organizationUnitStoreInterfaceMock_Expecter) IsOrganizationUnitExists(id interface{}) *organizationUnitStoreInterfaceMock_IsOrganizationUnitExists_Call {
	return &organizationUnitStoreInterfaceMock_IsOrganizationUnitExists_Call{Call: _e.mock.On("IsOrganizationUnitExists", id)}
}

func (_c *organizationUnitStoreInterfaceMock_IsOrganizationUnitExists_Call) Run(run func(id string)) *organizationUnitStoreInterfaceMock_IsOrganizationUnitExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_IsOrganizationUnitExists_Call) Return(b bool, err error) *organizationUnitStoreInterfaceMock_IsOrganizationUnitExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_IsOrganizationUnitExists_Call) RunAndReturn(run func(id string) (bool, error)) *organizationUnitStoreInterfaceMock_IsOrganizationUnitExists_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrganizationUnit provides a mock function for the type organizationUnitStoreInterfaceMock
func (_mock *organizationUnitStoreInterfaceMock) UpdateOrganizationUnit(ou1 ou.OrganizationUnit) error {
	ret := _mock.Called(ou1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationUnit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(ou.OrganizationUnit) error); ok {
		r0 = returnFunc(ou1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// organizationUnitStoreInterfaceMock_UpdateOrganizationUnit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrganizationUnit'
type organizationUnitStoreInterfaceMock_UpdateOrganizationUnit_Call struct {
	*mock.Call
}

// UpdateOrganizationUnit is a helper method to define mock.On call
//   - ou1 ou.OrganizationUnit
func (_e *organizationUnitStoreInterfaceMock_Expecter) UpdateOrganizationUnit(ou1 interface{}) *organizationUnitStoreInterfaceMock_UpdateOrganizationUnit_Call {
	return &organizationUnitStoreInterfaceMock_UpdateOrganizationUnit_Call{Call: _e.mock.On("UpdateOrganizationUnit", ou1)}
}

func (_c *organizationUnitStoreInterfaceMock_UpdateOrganizationUnit_Call) Run(run func(ou1 ou.OrganizationUnit)) *organizationUnitStoreInterfaceMock_UpdateOrganizationUnit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 ou.OrganizationUnit
		if args[0] != nil {
			arg0 = args[0].(ou.OrganizationUnit)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_UpdateOrganizationUnit_Call) Return(err error) *organizationUnitStoreInterfaceMock_UpdateOrganizationUnit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *organizationUnitStoreInterfaceMock_UpdateOrganizationUnit_Call) RunAndReturn(run func(ou1 ou.OrganizationUnit) error) *organizationUnitStoreInterfaceMock_UpdateOrganizationUnit_Call {
	_c.Call.Return(run)
	return _c
}
