// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package jwtmock

import (
	"crypto/rsa"

	mock "github.com/stretchr/testify/mock"
)

// NewJWTServiceInterfaceMock creates a new instance of JWTServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTServiceInterfaceMock {
	mock := &JWTServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// JWTServiceInterfaceMock is an autogenerated mock type for the JWTServiceInterface type
type JWTServiceInterfaceMock struct {
	mock.Mock
}

type JWTServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *JWTServiceInterfaceMock) EXPECT() *JWTServiceInterfaceMock_Expecter {
	return &JWTServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// GenerateJWT provides a mock function for the type JWTServiceInterfaceMock
func (_mock *JWTServiceInterfaceMock) GenerateJWT(sub string, aud string, iss string, validityPeriod int64, claims map[string]interface{}) (string, int64, error) {
	ret := _mock.Called(sub, aud, iss, validityPeriod, claims)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWT")
	}

	var r0 string
	var r1 int64
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, int64, map[string]interface{}) (string, int64, error)); ok {
		return returnFunc(sub, aud, iss, validityPeriod, claims)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, int64, map[string]interface{}) string); ok {
		r0 = returnFunc(sub, aud, iss, validityPeriod, claims)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, int64, map[string]interface{}) int64); ok {
		r1 = returnFunc(sub, aud, iss, validityPeriod, claims)
	} else {
		r1 = ret.Get(1).(int64)
	}
	if returnFunc, ok := ret.Get(2).(func(string, string, string, int64, map[string]interface{}) error); ok {
		r2 = returnFunc(sub, aud, iss, validityPeriod, claims)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// JWTServiceInterfaceMock_GenerateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateJWT'
type JWTServiceInterfaceMock_GenerateJWT_Call struct {
	*mock.Call
}

// GenerateJWT is a helper method to define mock.On call
//   - sub string
//   - aud string
//   - iss string
//   - validityPeriod int64
//   - claims map[string]interface{}
func (_e *JWTServiceInterfaceMock_Expecter) GenerateJWT(sub interface{}, aud interface{}, iss interface{}, validityPeriod interface{}, claims interface{}) *JWTServiceInterfaceMock_GenerateJWT_Call {
	return &JWTServiceInterfaceMock_GenerateJWT_Call{Call: _e.mock.On("GenerateJWT", sub, aud, iss, validityPeriod, claims)}
}

func (_c *JWTServiceInterfaceMock_GenerateJWT_Call) Run(run func(sub string, aud string, iss string, validityPeriod int64, claims map[string]interface{})) *JWTServiceInterfaceMock_GenerateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 int64
		if args[3] != nil {
			arg3 = args[3].(int64)
		}
		var arg4 map[string]interface{}
		if args[4] != nil {
			arg4 = args[4].(map[string]interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *JWTServiceInterfaceMock_GenerateJWT_Call) Return(s string, n int64, err error) *JWTServiceInterfaceMock_GenerateJWT_Call {
	_c.Call.Return(s, n, err)
	return _c
}

func (_c *JWTServiceInterfaceMock_GenerateJWT_Call) RunAndReturn(run func(sub string, aud string, iss string, validityPeriod int64, claims map[string]interface{}) (string, int64, error)) *JWTServiceInterfaceMock_GenerateJWT_Call {
	_c.Call.Return(run)
	return _c
}

// GetPublicKey provides a mock function for the type JWTServiceInterfaceMock
func (_mock *JWTServiceInterfaceMock) GetPublicKey() *rsa.PublicKey {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKey")
	}

	var r0 *rsa.PublicKey
	if returnFunc, ok := ret.Get(0).(func() *rsa.PublicKey); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rsa.PublicKey)
		}
	}
	return r0
}

// JWTServiceInterfaceMock_GetPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPublicKey'
type JWTServiceInterfaceMock_GetPublicKey_Call struct {
	*mock.Call
}

// GetPublicKey is a helper method to define mock.On call
func (_e *JWTServiceInterfaceMock_Expecter) GetPublicKey() *JWTServiceInterfaceMock_GetPublicKey_Call {
	return &JWTServiceInterfaceMock_GetPublicKey_Call{Call: _e.mock.On("GetPublicKey")}
}

func (_c *JWTServiceInterfaceMock_GetPublicKey_Call) Run(run func()) *JWTServiceInterfaceMock_GetPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JWTServiceInterfaceMock_GetPublicKey_Call) Return(publicKey *rsa.PublicKey) *JWTServiceInterfaceMock_GetPublicKey_Call {
	_c.Call.Return(publicKey)
	return _c
}

func (_c *JWTServiceInterfaceMock_GetPublicKey_Call) RunAndReturn(run func() *rsa.PublicKey) *JWTServiceInterfaceMock_GetPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function for the type JWTServiceInterfaceMock
func (_mock *JWTServiceInterfaceMock) Init() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// JWTServiceInterfaceMock_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type JWTServiceInterfaceMock_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *JWTServiceInterfaceMock_Expecter) Init() *JWTServiceInterfaceMock_Init_Call {
	return &JWTServiceInterfaceMock_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *JWTServiceInterfaceMock_Init_Call) Run(run func()) *JWTServiceInterfaceMock_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *JWTServiceInterfaceMock_Init_Call) Return(err error) *JWTServiceInterfaceMock_Init_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *JWTServiceInterfaceMock_Init_Call) RunAndReturn(run func() error) *JWTServiceInterfaceMock_Init_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyJWT provides a mock function for the type JWTServiceInterfaceMock
func (_mock *JWTServiceInterfaceMock) VerifyJWT(jwtToken string, expectedAud string, expectedIss string) error {
	ret := _mock.Called(jwtToken, expectedAud, expectedIss)

	if len(ret) == 0 {
		panic("no return value specified for VerifyJWT")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(jwtToken, expectedAud, expectedIss)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// JWTServiceInterfaceMock_VerifyJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyJWT'
type JWTServiceInterfaceMock_VerifyJWT_Call struct {
	*mock.Call
}

// VerifyJWT is a helper method to define mock.On call
//   - jwtToken string
//   - expectedAud string
//   - expectedIss string
func (_e *JWTServiceInterfaceMock_Expecter) VerifyJWT(jwtToken interface{}, expectedAud interface{}, expectedIss interface{}) *JWTServiceInterfaceMock_VerifyJWT_Call {
	return &JWTServiceInterfaceMock_VerifyJWT_Call{Call: _e.mock.On("VerifyJWT", jwtToken, expectedAud, expectedIss)}
}

func (_c *JWTServiceInterfaceMock_VerifyJWT_Call) Run(run func(jwtToken string, expectedAud string, expectedIss string)) *JWTServiceInterfaceMock_VerifyJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *JWTServiceInterfaceMock_VerifyJWT_Call) Return(err error) *JWTServiceInterfaceMock_VerifyJWT_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *JWTServiceInterfaceMock_VerifyJWT_Call) RunAndReturn(run func(jwtToken string, expectedAud string, expectedIss string) error) *JWTServiceInterfaceMock_VerifyJWT_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyJWTSignature provides a mock function for the type JWTServiceInterfaceMock
func (_mock *JWTServiceInterfaceMock) VerifyJWTSignature(jwtToken string) error {
	ret := _mock.Called(jwtToken)

	if len(ret) == 0 {
		panic("no return value specified for VerifyJWTSignature")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(jwtToken)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// JWTServiceInterfaceMock_VerifyJWTSignature_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyJWTSignature'
type JWTServiceInterfaceMock_VerifyJWTSignature_Call struct {
	*mock.Call
}

// VerifyJWTSignature is a helper method to define mock.On call
//   - jwtToken string
func (_e *JWTServiceInterfaceMock_Expecter) VerifyJWTSignature(jwtToken interface{}) *JWTServiceInterfaceMock_VerifyJWTSignature_Call {
	return &JWTServiceInterfaceMock_VerifyJWTSignature_Call{Call: _e.mock.On("VerifyJWTSignature", jwtToken)}
}

func (_c *JWTServiceInterfaceMock_VerifyJWTSignature_Call) Run(run func(jwtToken string)) *JWTServiceInterfaceMock_VerifyJWTSignature_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *JWTServiceInterfaceMock_VerifyJWTSignature_Call) Return(err error) *JWTServiceInterfaceMock_VerifyJWTSignature_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *JWTServiceInterfaceMock_VerifyJWTSignature_Call) RunAndReturn(run func(jwtToken string) error) *JWTServiceInterfaceMock_VerifyJWTSignature_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyJWTSignatureWithJWKS provides a mock function for the type JWTServiceInterfaceMock
func (_mock *JWTServiceInterfaceMock) VerifyJWTSignatureWithJWKS(jwtToken string, jwksURL string) error {
	ret := _mock.Called(jwtToken, jwksURL)

	if len(ret) == 0 {
		panic("no return value specified for VerifyJWTSignatureWithJWKS")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(jwtToken, jwksURL)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// JWTServiceInterfaceMock_VerifyJWTSignatureWithJWKS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyJWTSignatureWithJWKS'
type JWTServiceInterfaceMock_VerifyJWTSignatureWithJWKS_Call struct {
	*mock.Call
}

// VerifyJWTSignatureWithJWKS is a helper method to define mock.On call
//   - jwtToken string
//   - jwksURL string
func (_e *JWTServiceInterfaceMock_Expecter) VerifyJWTSignatureWithJWKS(jwtToken interface{}, jwksURL interface{}) *JWTServiceInterfaceMock_VerifyJWTSignatureWithJWKS_Call {
	return &JWTServiceInterfaceMock_VerifyJWTSignatureWithJWKS_Call{Call: _e.mock.On("VerifyJWTSignatureWithJWKS", jwtToken, jwksURL)}
}

func (_c *JWTServiceInterfaceMock_VerifyJWTSignatureWithJWKS_Call) Run(run func(jwtToken string, jwksURL string)) *JWTServiceInterfaceMock_VerifyJWTSignatureWithJWKS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *JWTServiceInterfaceMock_VerifyJWTSignatureWithJWKS_Call) Return(err error) *JWTServiceInterfaceMock_VerifyJWTSignatureWithJWKS_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *JWTServiceInterfaceMock_VerifyJWTSignatureWithJWKS_Call) RunAndReturn(run func(jwtToken string, jwksURL string) error) *JWTServiceInterfaceMock_VerifyJWTSignatureWithJWKS_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyJWTSignatureWithPublicKey provides a mock function for the type JWTServiceInterfaceMock
func (_mock *JWTServiceInterfaceMock) VerifyJWTSignatureWithPublicKey(jwtToken string, jwtPublicKey *rsa.PublicKey) error {
	ret := _mock.Called(jwtToken, jwtPublicKey)

	if len(ret) == 0 {
		panic("no return value specified for VerifyJWTSignatureWithPublicKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, *rsa.PublicKey) error); ok {
		r0 = returnFunc(jwtToken, jwtPublicKey)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// JWTServiceInterfaceMock_VerifyJWTSignatureWithPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyJWTSignatureWithPublicKey'
type JWTServiceInterfaceMock_VerifyJWTSignatureWithPublicKey_Call struct {
	*mock.Call
}

// VerifyJWTSignatureWithPublicKey is a helper method to define mock.On call
//   - jwtToken string
//   - jwtPublicKey *rsa.PublicKey
func (_e *JWTServiceInterfaceMock_Expecter) VerifyJWTSignatureWithPublicKey(jwtToken interface{}, jwtPublicKey interface{}) *JWTServiceInterfaceMock_VerifyJWTSignatureWithPublicKey_Call {
	return &JWTServiceInterfaceMock_VerifyJWTSignatureWithPublicKey_Call{Call: _e.mock.On("VerifyJWTSignatureWithPublicKey", jwtToken, jwtPublicKey)}
}

func (_c *JWTServiceInterfaceMock_VerifyJWTSignatureWithPublicKey_Call) Run(run func(jwtToken string, jwtPublicKey *rsa.PublicKey)) *JWTServiceInterfaceMock_VerifyJWTSignatureWithPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *rsa.PublicKey
		if args[1] != nil {
			arg1 = args[1].(*rsa.PublicKey)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *JWTServiceInterfaceMock_VerifyJWTSignatureWithPublicKey_Call) Return(err error) *JWTServiceInterfaceMock_VerifyJWTSignatureWithPublicKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *JWTServiceInterfaceMock_VerifyJWTSignatureWithPublicKey_Call) RunAndReturn(run func(jwtToken string, jwtPublicKey *rsa.PublicKey) error) *JWTServiceInterfaceMock_VerifyJWTSignatureWithPublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyJWTWithJWKS provides a mock function for the type JWTServiceInterfaceMock
func (_mock *JWTServiceInterfaceMock) VerifyJWTWithJWKS(jwtToken string, jwksURL string, expectedAud string, expectedIss string) error {
	ret := _mock.Called(jwtToken, jwksURL, expectedAud, expectedIss)

	if len(ret) == 0 {
		panic("no return value specified for VerifyJWTWithJWKS")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = returnFunc(jwtToken, jwksURL, expectedAud, expectedIss)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// JWTServiceInterfaceMock_VerifyJWTWithJWKS_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyJWTWithJWKS'
type JWTServiceInterfaceMock_VerifyJWTWithJWKS_Call struct {
	*mock.Call
}

// VerifyJWTWithJWKS is a helper method to define mock.On call
//   - jwtToken string
//   - jwksURL string
//   - expectedAud string
//   - expectedIss string
func (_e *JWTServiceInterfaceMock_Expecter) VerifyJWTWithJWKS(jwtToken interface{}, jwksURL interface{}, expectedAud interface{}, expectedIss interface{}) *JWTServiceInterfaceMock_VerifyJWTWithJWKS_Call {
	return &JWTServiceInterfaceMock_VerifyJWTWithJWKS_Call{Call: _e.mock.On("VerifyJWTWithJWKS", jwtToken, jwksURL, expectedAud, expectedIss)}
}

func (_c *JWTServiceInterfaceMock_VerifyJWTWithJWKS_Call) Run(run func(jwtToken string, jwksURL string, expectedAud string, expectedIss string)) *JWTServiceInterfaceMock_VerifyJWTWithJWKS_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *JWTServiceInterfaceMock_VerifyJWTWithJWKS_Call) Return(err error) *JWTServiceInterfaceMock_VerifyJWTWithJWKS_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *JWTServiceInterfaceMock_VerifyJWTWithJWKS_Call) RunAndReturn(run func(jwtToken string, jwksURL string, expectedAud string, expectedIss string) error) *JWTServiceInterfaceMock_VerifyJWTWithJWKS_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyJWTWithPublicKey provides a mock function for the type JWTServiceInterfaceMock
func (_mock *JWTServiceInterfaceMock) VerifyJWTWithPublicKey(jwtToken string, jwtPublicKey *rsa.PublicKey, expectedAud string, expectedIss string) error {
	ret := _mock.Called(jwtToken, jwtPublicKey, expectedAud, expectedIss)

	if len(ret) == 0 {
		panic("no return value specified for VerifyJWTWithPublicKey")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, *rsa.PublicKey, string, string) error); ok {
		r0 = returnFunc(jwtToken, jwtPublicKey, expectedAud, expectedIss)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// JWTServiceInterfaceMock_VerifyJWTWithPublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyJWTWithPublicKey'
type JWTServiceInterfaceMock_VerifyJWTWithPublicKey_Call struct {
	*mock.Call
}

// VerifyJWTWithPublicKey is a helper method to define mock.On call
//   - jwtToken string
//   - jwtPublicKey *rsa.PublicKey
//   - expectedAud string
//   - expectedIss string
func (_e *JWTServiceInterfaceMock_Expecter) VerifyJWTWithPublicKey(jwtToken interface{}, jwtPublicKey interface{}, expectedAud interface{}, expectedIss interface{}) *JWTServiceInterfaceMock_VerifyJWTWithPublicKey_Call {
	return &JWTServiceInterfaceMock_VerifyJWTWithPublicKey_Call{Call: _e.mock.On("VerifyJWTWithPublicKey", jwtToken, jwtPublicKey, expectedAud, expectedIss)}
}

func (_c *JWTServiceInterfaceMock_VerifyJWTWithPublicKey_Call) Run(run func(jwtToken string, jwtPublicKey *rsa.PublicKey, expectedAud string, expectedIss string)) *JWTServiceInterfaceMock_VerifyJWTWithPublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 *rsa.PublicKey
		if args[1] != nil {
			arg1 = args[1].(*rsa.PublicKey)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *JWTServiceInterfaceMock_VerifyJWTWithPublicKey_Call) Return(err error) *JWTServiceInterfaceMock_VerifyJWTWithPublicKey_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *JWTServiceInterfaceMock_VerifyJWTWithPublicKey_Call) RunAndReturn(run func(jwtToken string, jwtPublicKey *rsa.PublicKey, expectedAud string, expectedIss string) error) *JWTServiceInterfaceMock_VerifyJWTWithPublicKey_Call {
	_c.Call.Return(run)
	return _c
}
