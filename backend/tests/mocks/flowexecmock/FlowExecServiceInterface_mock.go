// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package flowexecmock

import (
	"github.com/asgardeo/thunder/internal/flow/common/model"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	mock "github.com/stretchr/testify/mock"
)

// NewFlowExecServiceInterfaceMock creates a new instance of FlowExecServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFlowExecServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlowExecServiceInterfaceMock {
	mock := &FlowExecServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FlowExecServiceInterfaceMock is an autogenerated mock type for the FlowExecServiceInterface type
type FlowExecServiceInterfaceMock struct {
	mock.Mock
}

type FlowExecServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FlowExecServiceInterfaceMock) EXPECT() *FlowExecServiceInterfaceMock_Expecter {
	return &FlowExecServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function for the type FlowExecServiceInterfaceMock
func (_mock *FlowExecServiceInterfaceMock) Execute(appID string, flowID string, actionID string, flowType string, inputData map[string]string) (*model.FlowStep, *serviceerror.ServiceError) {
	ret := _mock.Called(appID, flowID, actionID, flowType, inputData)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *model.FlowStep
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, map[string]string) (*model.FlowStep, *serviceerror.ServiceError)); ok {
		return returnFunc(appID, flowID, actionID, flowType, inputData)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string, string, map[string]string) *model.FlowStep); ok {
		r0 = returnFunc(appID, flowID, actionID, flowType, inputData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.FlowStep)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string, string, map[string]string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(appID, flowID, actionID, flowType, inputData)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// FlowExecServiceInterfaceMock_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type FlowExecServiceInterfaceMock_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - appID string
//   - flowID string
//   - actionID string
//   - flowType string
//   - inputData map[string]string
func (_e *FlowExecServiceInterfaceMock_Expecter) Execute(appID interface{}, flowID interface{}, actionID interface{}, flowType interface{}, inputData interface{}) *FlowExecServiceInterfaceMock_Execute_Call {
	return &FlowExecServiceInterfaceMock_Execute_Call{Call: _e.mock.On("Execute", appID, flowID, actionID, flowType, inputData)}
}

func (_c *FlowExecServiceInterfaceMock_Execute_Call) Run(run func(appID string, flowID string, actionID string, flowType string, inputData map[string]string)) *FlowExecServiceInterfaceMock_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 map[string]string
		if args[4] != nil {
			arg4 = args[4].(map[string]string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *FlowExecServiceInterfaceMock_Execute_Call) Return(flowStep *model.FlowStep, serviceError *serviceerror.ServiceError) *FlowExecServiceInterfaceMock_Execute_Call {
	_c.Call.Return(flowStep, serviceError)
	return _c
}

func (_c *FlowExecServiceInterfaceMock_Execute_Call) RunAndReturn(run func(appID string, flowID string, actionID string, flowType string, inputData map[string]string) (*model.FlowStep, *serviceerror.ServiceError)) *FlowExecServiceInterfaceMock_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// InitiateFlow provides a mock function for the type FlowExecServiceInterfaceMock
func (_mock *FlowExecServiceInterfaceMock) InitiateFlow(initContext *model.FlowInitContext) (string, *serviceerror.ServiceError) {
	ret := _mock.Called(initContext)

	if len(ret) == 0 {
		panic("no return value specified for InitiateFlow")
	}

	var r0 string
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(*model.FlowInitContext) (string, *serviceerror.ServiceError)); ok {
		return returnFunc(initContext)
	}
	if returnFunc, ok := ret.Get(0).(func(*model.FlowInitContext) string); ok {
		r0 = returnFunc(initContext)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(*model.FlowInitContext) *serviceerror.ServiceError); ok {
		r1 = returnFunc(initContext)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// FlowExecServiceInterfaceMock_InitiateFlow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiateFlow'
type FlowExecServiceInterfaceMock_InitiateFlow_Call struct {
	*mock.Call
}

// InitiateFlow is a helper method to define mock.On call
//   - initContext *model.FlowInitContext
func (_e *FlowExecServiceInterfaceMock_Expecter) InitiateFlow(initContext interface{}) *FlowExecServiceInterfaceMock_InitiateFlow_Call {
	return &FlowExecServiceInterfaceMock_InitiateFlow_Call{Call: _e.mock.On("InitiateFlow", initContext)}
}

func (_c *FlowExecServiceInterfaceMock_InitiateFlow_Call) Run(run func(initContext *model.FlowInitContext)) *FlowExecServiceInterfaceMock_InitiateFlow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *model.FlowInitContext
		if args[0] != nil {
			arg0 = args[0].(*model.FlowInitContext)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FlowExecServiceInterfaceMock_InitiateFlow_Call) Return(s string, serviceError *serviceerror.ServiceError) *FlowExecServiceInterfaceMock_InitiateFlow_Call {
	_c.Call.Return(s, serviceError)
	return _c
}

func (_c *FlowExecServiceInterfaceMock_InitiateFlow_Call) RunAndReturn(run func(initContext *model.FlowInitContext) (string, *serviceerror.ServiceError)) *FlowExecServiceInterfaceMock_InitiateFlow_Call {
	_c.Call.Return(run)
	return _c
}
