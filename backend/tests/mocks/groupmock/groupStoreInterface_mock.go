// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package groupmock

import (
	"github.com/asgardeo/thunder/internal/group"
	mock "github.com/stretchr/testify/mock"
)

// newGroupStoreInterfaceMock creates a new instance of groupStoreInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newGroupStoreInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *groupStoreInterfaceMock {
	mock := &groupStoreInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// groupStoreInterfaceMock is an autogenerated mock type for the groupStoreInterface type
type groupStoreInterfaceMock struct {
	mock.Mock
}

type groupStoreInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *groupStoreInterfaceMock) EXPECT() *groupStoreInterfaceMock_Expecter {
	return &groupStoreInterfaceMock_Expecter{mock: &_m.Mock}
}

// CheckGroupNameConflictForCreate provides a mock function for the type groupStoreInterfaceMock
func (_mock *groupStoreInterfaceMock) CheckGroupNameConflictForCreate(name string, organizationUnitID string) error {
	ret := _mock.Called(name, organizationUnitID)

	if len(ret) == 0 {
		panic("no return value specified for CheckGroupNameConflictForCreate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(name, organizationUnitID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// groupStoreInterfaceMock_CheckGroupNameConflictForCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckGroupNameConflictForCreate'
type groupStoreInterfaceMock_CheckGroupNameConflictForCreate_Call struct {
	*mock.Call
}

// CheckGroupNameConflictForCreate is a helper method to define mock.On call
//   - name string
//   - organizationUnitID string
func (_e *groupStoreInterfaceMock_Expecter) CheckGroupNameConflictForCreate(name interface{}, organizationUnitID interface{}) *groupStoreInterfaceMock_CheckGroupNameConflictForCreate_Call {
	return &groupStoreInterfaceMock_CheckGroupNameConflictForCreate_Call{Call: _e.mock.On("CheckGroupNameConflictForCreate", name, organizationUnitID)}
}

func (_c *groupStoreInterfaceMock_CheckGroupNameConflictForCreate_Call) Run(run func(name string, organizationUnitID string)) *groupStoreInterfaceMock_CheckGroupNameConflictForCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *groupStoreInterfaceMock_CheckGroupNameConflictForCreate_Call) Return(err error) *groupStoreInterfaceMock_CheckGroupNameConflictForCreate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *groupStoreInterfaceMock_CheckGroupNameConflictForCreate_Call) RunAndReturn(run func(name string, organizationUnitID string) error) *groupStoreInterfaceMock_CheckGroupNameConflictForCreate_Call {
	_c.Call.Return(run)
	return _c
}

// CheckGroupNameConflictForUpdate provides a mock function for the type groupStoreInterfaceMock
func (_mock *groupStoreInterfaceMock) CheckGroupNameConflictForUpdate(name string, organizationUnitID string, groupID string) error {
	ret := _mock.Called(name, organizationUnitID, groupID)

	if len(ret) == 0 {
		panic("no return value specified for CheckGroupNameConflictForUpdate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = returnFunc(name, organizationUnitID, groupID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// groupStoreInterfaceMock_CheckGroupNameConflictForUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckGroupNameConflictForUpdate'
type groupStoreInterfaceMock_CheckGroupNameConflictForUpdate_Call struct {
	*mock.Call
}

// CheckGroupNameConflictForUpdate is a helper method to define mock.On call
//   - name string
//   - organizationUnitID string
//   - groupID string
func (_e *groupStoreInterfaceMock_Expecter) CheckGroupNameConflictForUpdate(name interface{}, organizationUnitID interface{}, groupID interface{}) *groupStoreInterfaceMock_CheckGroupNameConflictForUpdate_Call {
	return &groupStoreInterfaceMock_CheckGroupNameConflictForUpdate_Call{Call: _e.mock.On("CheckGroupNameConflictForUpdate", name, organizationUnitID, groupID)}
}

func (_c *groupStoreInterfaceMock_CheckGroupNameConflictForUpdate_Call) Run(run func(name string, organizationUnitID string, groupID string)) *groupStoreInterfaceMock_CheckGroupNameConflictForUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *groupStoreInterfaceMock_CheckGroupNameConflictForUpdate_Call) Return(err error) *groupStoreInterfaceMock_CheckGroupNameConflictForUpdate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *groupStoreInterfaceMock_CheckGroupNameConflictForUpdate_Call) RunAndReturn(run func(name string, organizationUnitID string, groupID string) error) *groupStoreInterfaceMock_CheckGroupNameConflictForUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroup provides a mock function for the type groupStoreInterfaceMock
func (_mock *groupStoreInterfaceMock) CreateGroup(group1 group.GroupDAO) error {
	ret := _mock.Called(group1)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(group.GroupDAO) error); ok {
		r0 = returnFunc(group1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// groupStoreInterfaceMock_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type groupStoreInterfaceMock_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - group1 group.GroupDAO
func (_e *groupStoreInterfaceMock_Expecter) CreateGroup(group1 interface{}) *groupStoreInterfaceMock_CreateGroup_Call {
	return &groupStoreInterfaceMock_CreateGroup_Call{Call: _e.mock.On("CreateGroup", group1)}
}

func (_c *groupStoreInterfaceMock_CreateGroup_Call) Run(run func(group1 group.GroupDAO)) *groupStoreInterfaceMock_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 group.GroupDAO
		if args[0] != nil {
			arg0 = args[0].(group.GroupDAO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *groupStoreInterfaceMock_CreateGroup_Call) Return(err error) *groupStoreInterfaceMock_CreateGroup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *groupStoreInterfaceMock_CreateGroup_Call) RunAndReturn(run func(group1 group.GroupDAO) error) *groupStoreInterfaceMock_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function for the type groupStoreInterfaceMock
func (_mock *groupStoreInterfaceMock) DeleteGroup(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// groupStoreInterfaceMock_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type groupStoreInterfaceMock_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - id string
func (_e *groupStoreInterfaceMock_Expecter) DeleteGroup(id interface{}) *groupStoreInterfaceMock_DeleteGroup_Call {
	return &groupStoreInterfaceMock_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", id)}
}

func (_c *groupStoreInterfaceMock_DeleteGroup_Call) Run(run func(id string)) *groupStoreInterfaceMock_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *groupStoreInterfaceMock_DeleteGroup_Call) Return(err error) *groupStoreInterfaceMock_DeleteGroup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *groupStoreInterfaceMock_DeleteGroup_Call) RunAndReturn(run func(id string) error) *groupStoreInterfaceMock_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroup provides a mock function for the type groupStoreInterfaceMock
func (_mock *groupStoreInterfaceMock) GetGroup(id string) (group.GroupDAO, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 group.GroupDAO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (group.GroupDAO, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) group.GroupDAO); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(group.GroupDAO)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// groupStoreInterfaceMock_GetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroup'
type groupStoreInterfaceMock_GetGroup_Call struct {
	*mock.Call
}

// GetGroup is a helper method to define mock.On call
//   - id string
func (_e *groupStoreInterfaceMock_Expecter) GetGroup(id interface{}) *groupStoreInterfaceMock_GetGroup_Call {
	return &groupStoreInterfaceMock_GetGroup_Call{Call: _e.mock.On("GetGroup", id)}
}

func (_c *groupStoreInterfaceMock_GetGroup_Call) Run(run func(id string)) *groupStoreInterfaceMock_GetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroup_Call) Return(groupDAO group.GroupDAO, err error) *groupStoreInterfaceMock_GetGroup_Call {
	_c.Call.Return(groupDAO, err)
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroup_Call) RunAndReturn(run func(id string) (group.GroupDAO, error)) *groupStoreInterfaceMock_GetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupList provides a mock function for the type groupStoreInterfaceMock
func (_mock *groupStoreInterfaceMock) GetGroupList(limit int, offset int) ([]group.GroupBasicDAO, error) {
	ret := _mock.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupList")
	}

	var r0 []group.GroupBasicDAO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int) ([]group.GroupBasicDAO, error)); ok {
		return returnFunc(limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) []group.GroupBasicDAO); ok {
		r0 = returnFunc(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]group.GroupBasicDAO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = returnFunc(limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// groupStoreInterfaceMock_GetGroupList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupList'
type groupStoreInterfaceMock_GetGroupList_Call struct {
	*mock.Call
}

// GetGroupList is a helper method to define mock.On call
//   - limit int
//   - offset int
func (_e *groupStoreInterfaceMock_Expecter) GetGroupList(limit interface{}, offset interface{}) *groupStoreInterfaceMock_GetGroupList_Call {
	return &groupStoreInterfaceMock_GetGroupList_Call{Call: _e.mock.On("GetGroupList", limit, offset)}
}

func (_c *groupStoreInterfaceMock_GetGroupList_Call) Run(run func(limit int, offset int)) *groupStoreInterfaceMock_GetGroupList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroupList_Call) Return(groupBasicDAOs []group.GroupBasicDAO, err error) *groupStoreInterfaceMock_GetGroupList_Call {
	_c.Call.Return(groupBasicDAOs, err)
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroupList_Call) RunAndReturn(run func(limit int, offset int) ([]group.GroupBasicDAO, error)) *groupStoreInterfaceMock_GetGroupList_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupListCount provides a mock function for the type groupStoreInterfaceMock
func (_mock *groupStoreInterfaceMock) GetGroupListCount() (int, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetGroupListCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// groupStoreInterfaceMock_GetGroupListCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupListCount'
type groupStoreInterfaceMock_GetGroupListCount_Call struct {
	*mock.Call
}

// GetGroupListCount is a helper method to define mock.On call
func (_e *groupStoreInterfaceMock_Expecter) GetGroupListCount() *groupStoreInterfaceMock_GetGroupListCount_Call {
	return &groupStoreInterfaceMock_GetGroupListCount_Call{Call: _e.mock.On("GetGroupListCount")}
}

func (_c *groupStoreInterfaceMock_GetGroupListCount_Call) Run(run func()) *groupStoreInterfaceMock_GetGroupListCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroupListCount_Call) Return(n int, err error) *groupStoreInterfaceMock_GetGroupListCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroupListCount_Call) RunAndReturn(run func() (int, error)) *groupStoreInterfaceMock_GetGroupListCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupMemberCount provides a mock function for the type groupStoreInterfaceMock
func (_mock *groupStoreInterfaceMock) GetGroupMemberCount(groupID string) (int, error) {
	ret := _mock.Called(groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupMemberCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int, error)); ok {
		return returnFunc(groupID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(groupID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(groupID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// groupStoreInterfaceMock_GetGroupMemberCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupMemberCount'
type groupStoreInterfaceMock_GetGroupMemberCount_Call struct {
	*mock.Call
}

// GetGroupMemberCount is a helper method to define mock.On call
//   - groupID string
func (_e *groupStoreInterfaceMock_Expecter) GetGroupMemberCount(groupID interface{}) *groupStoreInterfaceMock_GetGroupMemberCount_Call {
	return &groupStoreInterfaceMock_GetGroupMemberCount_Call{Call: _e.mock.On("GetGroupMemberCount", groupID)}
}

func (_c *groupStoreInterfaceMock_GetGroupMemberCount_Call) Run(run func(groupID string)) *groupStoreInterfaceMock_GetGroupMemberCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroupMemberCount_Call) Return(n int, err error) *groupStoreInterfaceMock_GetGroupMemberCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroupMemberCount_Call) RunAndReturn(run func(groupID string) (int, error)) *groupStoreInterfaceMock_GetGroupMemberCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupMembers provides a mock function for the type groupStoreInterfaceMock
func (_mock *groupStoreInterfaceMock) GetGroupMembers(groupID string, limit int, offset int) ([]group.Member, error) {
	ret := _mock.Called(groupID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupMembers")
	}

	var r0 []group.Member
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) ([]group.Member, error)); ok {
		return returnFunc(groupID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) []group.Member); ok {
		r0 = returnFunc(groupID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]group.Member)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(groupID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// groupStoreInterfaceMock_GetGroupMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupMembers'
type groupStoreInterfaceMock_GetGroupMembers_Call struct {
	*mock.Call
}

// GetGroupMembers is a helper method to define mock.On call
//   - groupID string
//   - limit int
//   - offset int
func (_e *groupStoreInterfaceMock_Expecter) GetGroupMembers(groupID interface{}, limit interface{}, offset interface{}) *groupStoreInterfaceMock_GetGroupMembers_Call {
	return &groupStoreInterfaceMock_GetGroupMembers_Call{Call: _e.mock.On("GetGroupMembers", groupID, limit, offset)}
}

func (_c *groupStoreInterfaceMock_GetGroupMembers_Call) Run(run func(groupID string, limit int, offset int)) *groupStoreInterfaceMock_GetGroupMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroupMembers_Call) Return(members []group.Member, err error) *groupStoreInterfaceMock_GetGroupMembers_Call {
	_c.Call.Return(members, err)
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroupMembers_Call) RunAndReturn(run func(groupID string, limit int, offset int) ([]group.Member, error)) *groupStoreInterfaceMock_GetGroupMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupsByOrganizationUnit provides a mock function for the type groupStoreInterfaceMock
func (_mock *groupStoreInterfaceMock) GetGroupsByOrganizationUnit(organizationUnitID string, limit int, offset int) ([]group.GroupBasicDAO, error) {
	ret := _mock.Called(organizationUnitID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupsByOrganizationUnit")
	}

	var r0 []group.GroupBasicDAO
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) ([]group.GroupBasicDAO, error)); ok {
		return returnFunc(organizationUnitID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) []group.GroupBasicDAO); ok {
		r0 = returnFunc(organizationUnitID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]group.GroupBasicDAO)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(organizationUnitID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// groupStoreInterfaceMock_GetGroupsByOrganizationUnit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupsByOrganizationUnit'
type groupStoreInterfaceMock_GetGroupsByOrganizationUnit_Call struct {
	*mock.Call
}

// GetGroupsByOrganizationUnit is a helper method to define mock.On call
//   - organizationUnitID string
//   - limit int
//   - offset int
func (_e *groupStoreInterfaceMock_Expecter) GetGroupsByOrganizationUnit(organizationUnitID interface{}, limit interface{}, offset interface{}) *groupStoreInterfaceMock_GetGroupsByOrganizationUnit_Call {
	return &groupStoreInterfaceMock_GetGroupsByOrganizationUnit_Call{Call: _e.mock.On("GetGroupsByOrganizationUnit", organizationUnitID, limit, offset)}
}

func (_c *groupStoreInterfaceMock_GetGroupsByOrganizationUnit_Call) Run(run func(organizationUnitID string, limit int, offset int)) *groupStoreInterfaceMock_GetGroupsByOrganizationUnit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroupsByOrganizationUnit_Call) Return(groupBasicDAOs []group.GroupBasicDAO, err error) *groupStoreInterfaceMock_GetGroupsByOrganizationUnit_Call {
	_c.Call.Return(groupBasicDAOs, err)
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroupsByOrganizationUnit_Call) RunAndReturn(run func(organizationUnitID string, limit int, offset int) ([]group.GroupBasicDAO, error)) *groupStoreInterfaceMock_GetGroupsByOrganizationUnit_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupsByOrganizationUnitCount provides a mock function for the type groupStoreInterfaceMock
func (_mock *groupStoreInterfaceMock) GetGroupsByOrganizationUnitCount(organizationUnitID string) (int, error) {
	ret := _mock.Called(organizationUnitID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupsByOrganizationUnitCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int, error)); ok {
		return returnFunc(organizationUnitID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(organizationUnitID)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(organizationUnitID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// groupStoreInterfaceMock_GetGroupsByOrganizationUnitCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupsByOrganizationUnitCount'
type groupStoreInterfaceMock_GetGroupsByOrganizationUnitCount_Call struct {
	*mock.Call
}

// GetGroupsByOrganizationUnitCount is a helper method to define mock.On call
//   - organizationUnitID string
func (_e *groupStoreInterfaceMock_Expecter) GetGroupsByOrganizationUnitCount(organizationUnitID interface{}) *groupStoreInterfaceMock_GetGroupsByOrganizationUnitCount_Call {
	return &groupStoreInterfaceMock_GetGroupsByOrganizationUnitCount_Call{Call: _e.mock.On("GetGroupsByOrganizationUnitCount", organizationUnitID)}
}

func (_c *groupStoreInterfaceMock_GetGroupsByOrganizationUnitCount_Call) Run(run func(organizationUnitID string)) *groupStoreInterfaceMock_GetGroupsByOrganizationUnitCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroupsByOrganizationUnitCount_Call) Return(n int, err error) *groupStoreInterfaceMock_GetGroupsByOrganizationUnitCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *groupStoreInterfaceMock_GetGroupsByOrganizationUnitCount_Call) RunAndReturn(run func(organizationUnitID string) (int, error)) *groupStoreInterfaceMock_GetGroupsByOrganizationUnitCount_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function for the type groupStoreInterfaceMock
func (_mock *groupStoreInterfaceMock) UpdateGroup(group1 group.GroupDAO) error {
	ret := _mock.Called(group1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(group.GroupDAO) error); ok {
		r0 = returnFunc(group1)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// groupStoreInterfaceMock_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type groupStoreInterfaceMock_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - group1 group.GroupDAO
func (_e *groupStoreInterfaceMock_Expecter) UpdateGroup(group1 interface{}) *groupStoreInterfaceMock_UpdateGroup_Call {
	return &groupStoreInterfaceMock_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup", group1)}
}

func (_c *groupStoreInterfaceMock_UpdateGroup_Call) Run(run func(group1 group.GroupDAO)) *groupStoreInterfaceMock_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 group.GroupDAO
		if args[0] != nil {
			arg0 = args[0].(group.GroupDAO)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *groupStoreInterfaceMock_UpdateGroup_Call) Return(err error) *groupStoreInterfaceMock_UpdateGroup_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *groupStoreInterfaceMock_UpdateGroup_Call) RunAndReturn(run func(group1 group.GroupDAO) error) *groupStoreInterfaceMock_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateGroupIDs provides a mock function for the type groupStoreInterfaceMock
func (_mock *groupStoreInterfaceMock) ValidateGroupIDs(groupIDs []string) ([]string, error) {
	ret := _mock.Called(groupIDs)

	if len(ret) == 0 {
		panic("no return value specified for ValidateGroupIDs")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return returnFunc(groupIDs)
	}
	if returnFunc, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = returnFunc(groupIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func([]string) error); ok {
		r1 = returnFunc(groupIDs)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// groupStoreInterfaceMock_ValidateGroupIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateGroupIDs'
type groupStoreInterfaceMock_ValidateGroupIDs_Call struct {
	*mock.Call
}

// ValidateGroupIDs is a helper method to define mock.On call
//   - groupIDs []string
func (_e *groupStoreInterfaceMock_Expecter) ValidateGroupIDs(groupIDs interface{}) *groupStoreInterfaceMock_ValidateGroupIDs_Call {
	return &groupStoreInterfaceMock_ValidateGroupIDs_Call{Call: _e.mock.On("ValidateGroupIDs", groupIDs)}
}

func (_c *groupStoreInterfaceMock_ValidateGroupIDs_Call) Run(run func(groupIDs []string)) *groupStoreInterfaceMock_ValidateGroupIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *groupStoreInterfaceMock_ValidateGroupIDs_Call) Return(strings []string, err error) *groupStoreInterfaceMock_ValidateGroupIDs_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *groupStoreInterfaceMock_ValidateGroupIDs_Call) RunAndReturn(run func(groupIDs []string) ([]string, error)) *groupStoreInterfaceMock_ValidateGroupIDs_Call {
	_c.Call.Return(run)
	return _c
}
