// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package groupmock

import (
	"github.com/asgardeo/thunder/internal/group"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	mock "github.com/stretchr/testify/mock"
)

// NewGroupServiceInterfaceMock creates a new instance of GroupServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupServiceInterfaceMock {
	mock := &GroupServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GroupServiceInterfaceMock is an autogenerated mock type for the GroupServiceInterface type
type GroupServiceInterfaceMock struct {
	mock.Mock
}

type GroupServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *GroupServiceInterfaceMock) EXPECT() *GroupServiceInterfaceMock_Expecter {
	return &GroupServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// CreateGroup provides a mock function for the type GroupServiceInterfaceMock
func (_mock *GroupServiceInterfaceMock) CreateGroup(request group.CreateGroupRequest) (*group.Group, *serviceerror.ServiceError) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *group.Group
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(group.CreateGroupRequest) (*group.Group, *serviceerror.ServiceError)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(group.CreateGroupRequest) *group.Group); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*group.Group)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(group.CreateGroupRequest) *serviceerror.ServiceError); ok {
		r1 = returnFunc(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// GroupServiceInterfaceMock_CreateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroup'
type GroupServiceInterfaceMock_CreateGroup_Call struct {
	*mock.Call
}

// CreateGroup is a helper method to define mock.On call
//   - request group.CreateGroupRequest
func (_e *GroupServiceInterfaceMock_Expecter) CreateGroup(request interface{}) *GroupServiceInterfaceMock_CreateGroup_Call {
	return &GroupServiceInterfaceMock_CreateGroup_Call{Call: _e.mock.On("CreateGroup", request)}
}

func (_c *GroupServiceInterfaceMock_CreateGroup_Call) Run(run func(request group.CreateGroupRequest)) *GroupServiceInterfaceMock_CreateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 group.CreateGroupRequest
		if args[0] != nil {
			arg0 = args[0].(group.CreateGroupRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GroupServiceInterfaceMock_CreateGroup_Call) Return(group1 *group.Group, serviceError *serviceerror.ServiceError) *GroupServiceInterfaceMock_CreateGroup_Call {
	_c.Call.Return(group1, serviceError)
	return _c
}

func (_c *GroupServiceInterfaceMock_CreateGroup_Call) RunAndReturn(run func(request group.CreateGroupRequest) (*group.Group, *serviceerror.ServiceError)) *GroupServiceInterfaceMock_CreateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// CreateGroupByPath provides a mock function for the type GroupServiceInterfaceMock
func (_mock *GroupServiceInterfaceMock) CreateGroupByPath(handlePath string, request group.CreateGroupByPathRequest) (*group.Group, *serviceerror.ServiceError) {
	ret := _mock.Called(handlePath, request)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupByPath")
	}

	var r0 *group.Group
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, group.CreateGroupByPathRequest) (*group.Group, *serviceerror.ServiceError)); ok {
		return returnFunc(handlePath, request)
	}
	if returnFunc, ok := ret.Get(0).(func(string, group.CreateGroupByPathRequest) *group.Group); ok {
		r0 = returnFunc(handlePath, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*group.Group)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, group.CreateGroupByPathRequest) *serviceerror.ServiceError); ok {
		r1 = returnFunc(handlePath, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// GroupServiceInterfaceMock_CreateGroupByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateGroupByPath'
type GroupServiceInterfaceMock_CreateGroupByPath_Call struct {
	*mock.Call
}

// CreateGroupByPath is a helper method to define mock.On call
//   - handlePath string
//   - request group.CreateGroupByPathRequest
func (_e *GroupServiceInterfaceMock_Expecter) CreateGroupByPath(handlePath interface{}, request interface{}) *GroupServiceInterfaceMock_CreateGroupByPath_Call {
	return &GroupServiceInterfaceMock_CreateGroupByPath_Call{Call: _e.mock.On("CreateGroupByPath", handlePath, request)}
}

func (_c *GroupServiceInterfaceMock_CreateGroupByPath_Call) Run(run func(handlePath string, request group.CreateGroupByPathRequest)) *GroupServiceInterfaceMock_CreateGroupByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 group.CreateGroupByPathRequest
		if args[1] != nil {
			arg1 = args[1].(group.CreateGroupByPathRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GroupServiceInterfaceMock_CreateGroupByPath_Call) Return(group1 *group.Group, serviceError *serviceerror.ServiceError) *GroupServiceInterfaceMock_CreateGroupByPath_Call {
	_c.Call.Return(group1, serviceError)
	return _c
}

func (_c *GroupServiceInterfaceMock_CreateGroupByPath_Call) RunAndReturn(run func(handlePath string, request group.CreateGroupByPathRequest) (*group.Group, *serviceerror.ServiceError)) *GroupServiceInterfaceMock_CreateGroupByPath_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteGroup provides a mock function for the type GroupServiceInterfaceMock
func (_mock *GroupServiceInterfaceMock) DeleteGroup(groupID string) *serviceerror.ServiceError {
	ret := _mock.Called(groupID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) *serviceerror.ServiceError); ok {
		r0 = returnFunc(groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceerror.ServiceError)
		}
	}
	return r0
}

// GroupServiceInterfaceMock_DeleteGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteGroup'
type GroupServiceInterfaceMock_DeleteGroup_Call struct {
	*mock.Call
}

// DeleteGroup is a helper method to define mock.On call
//   - groupID string
func (_e *GroupServiceInterfaceMock_Expecter) DeleteGroup(groupID interface{}) *GroupServiceInterfaceMock_DeleteGroup_Call {
	return &GroupServiceInterfaceMock_DeleteGroup_Call{Call: _e.mock.On("DeleteGroup", groupID)}
}

func (_c *GroupServiceInterfaceMock_DeleteGroup_Call) Run(run func(groupID string)) *GroupServiceInterfaceMock_DeleteGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GroupServiceInterfaceMock_DeleteGroup_Call) Return(serviceError *serviceerror.ServiceError) *GroupServiceInterfaceMock_DeleteGroup_Call {
	_c.Call.Return(serviceError)
	return _c
}

func (_c *GroupServiceInterfaceMock_DeleteGroup_Call) RunAndReturn(run func(groupID string) *serviceerror.ServiceError) *GroupServiceInterfaceMock_DeleteGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroup provides a mock function for the type GroupServiceInterfaceMock
func (_mock *GroupServiceInterfaceMock) GetGroup(groupID string) (*group.Group, *serviceerror.ServiceError) {
	ret := _mock.Called(groupID)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *group.Group
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (*group.Group, *serviceerror.ServiceError)); ok {
		return returnFunc(groupID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *group.Group); ok {
		r0 = returnFunc(groupID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*group.Group)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(groupID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// GroupServiceInterfaceMock_GetGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroup'
type GroupServiceInterfaceMock_GetGroup_Call struct {
	*mock.Call
}

// GetGroup is a helper method to define mock.On call
//   - groupID string
func (_e *GroupServiceInterfaceMock_Expecter) GetGroup(groupID interface{}) *GroupServiceInterfaceMock_GetGroup_Call {
	return &GroupServiceInterfaceMock_GetGroup_Call{Call: _e.mock.On("GetGroup", groupID)}
}

func (_c *GroupServiceInterfaceMock_GetGroup_Call) Run(run func(groupID string)) *GroupServiceInterfaceMock_GetGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GroupServiceInterfaceMock_GetGroup_Call) Return(group1 *group.Group, serviceError *serviceerror.ServiceError) *GroupServiceInterfaceMock_GetGroup_Call {
	_c.Call.Return(group1, serviceError)
	return _c
}

func (_c *GroupServiceInterfaceMock_GetGroup_Call) RunAndReturn(run func(groupID string) (*group.Group, *serviceerror.ServiceError)) *GroupServiceInterfaceMock_GetGroup_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupList provides a mock function for the type GroupServiceInterfaceMock
func (_mock *GroupServiceInterfaceMock) GetGroupList(limit int, offset int) (*group.GroupListResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupList")
	}

	var r0 *group.GroupListResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(int, int) (*group.GroupListResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) *group.GroupListResponse); ok {
		r0 = returnFunc(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*group.GroupListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) *serviceerror.ServiceError); ok {
		r1 = returnFunc(limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// GroupServiceInterfaceMock_GetGroupList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupList'
type GroupServiceInterfaceMock_GetGroupList_Call struct {
	*mock.Call
}

// GetGroupList is a helper method to define mock.On call
//   - limit int
//   - offset int
func (_e *GroupServiceInterfaceMock_Expecter) GetGroupList(limit interface{}, offset interface{}) *GroupServiceInterfaceMock_GetGroupList_Call {
	return &GroupServiceInterfaceMock_GetGroupList_Call{Call: _e.mock.On("GetGroupList", limit, offset)}
}

func (_c *GroupServiceInterfaceMock_GetGroupList_Call) Run(run func(limit int, offset int)) *GroupServiceInterfaceMock_GetGroupList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GroupServiceInterfaceMock_GetGroupList_Call) Return(groupListResponse *group.GroupListResponse, serviceError *serviceerror.ServiceError) *GroupServiceInterfaceMock_GetGroupList_Call {
	_c.Call.Return(groupListResponse, serviceError)
	return _c
}

func (_c *GroupServiceInterfaceMock_GetGroupList_Call) RunAndReturn(run func(limit int, offset int) (*group.GroupListResponse, *serviceerror.ServiceError)) *GroupServiceInterfaceMock_GetGroupList_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupMembers provides a mock function for the type GroupServiceInterfaceMock
func (_mock *GroupServiceInterfaceMock) GetGroupMembers(groupID string, limit int, offset int) (*group.MemberListResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(groupID, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupMembers")
	}

	var r0 *group.MemberListResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, int, int) (*group.MemberListResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(groupID, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) *group.MemberListResponse); ok {
		r0 = returnFunc(groupID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*group.MemberListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) *serviceerror.ServiceError); ok {
		r1 = returnFunc(groupID, limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// GroupServiceInterfaceMock_GetGroupMembers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupMembers'
type GroupServiceInterfaceMock_GetGroupMembers_Call struct {
	*mock.Call
}

// GetGroupMembers is a helper method to define mock.On call
//   - groupID string
//   - limit int
//   - offset int
func (_e *GroupServiceInterfaceMock_Expecter) GetGroupMembers(groupID interface{}, limit interface{}, offset interface{}) *GroupServiceInterfaceMock_GetGroupMembers_Call {
	return &GroupServiceInterfaceMock_GetGroupMembers_Call{Call: _e.mock.On("GetGroupMembers", groupID, limit, offset)}
}

func (_c *GroupServiceInterfaceMock_GetGroupMembers_Call) Run(run func(groupID string, limit int, offset int)) *GroupServiceInterfaceMock_GetGroupMembers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GroupServiceInterfaceMock_GetGroupMembers_Call) Return(memberListResponse *group.MemberListResponse, serviceError *serviceerror.ServiceError) *GroupServiceInterfaceMock_GetGroupMembers_Call {
	_c.Call.Return(memberListResponse, serviceError)
	return _c
}

func (_c *GroupServiceInterfaceMock_GetGroupMembers_Call) RunAndReturn(run func(groupID string, limit int, offset int) (*group.MemberListResponse, *serviceerror.ServiceError)) *GroupServiceInterfaceMock_GetGroupMembers_Call {
	_c.Call.Return(run)
	return _c
}

// GetGroupsByPath provides a mock function for the type GroupServiceInterfaceMock
func (_mock *GroupServiceInterfaceMock) GetGroupsByPath(handlePath string, limit int, offset int) (*group.GroupListResponse, *serviceerror.ServiceError) {
	ret := _mock.Called(handlePath, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupsByPath")
	}

	var r0 *group.GroupListResponse
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, int, int) (*group.GroupListResponse, *serviceerror.ServiceError)); ok {
		return returnFunc(handlePath, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) *group.GroupListResponse); ok {
		r0 = returnFunc(handlePath, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*group.GroupListResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) *serviceerror.ServiceError); ok {
		r1 = returnFunc(handlePath, limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// GroupServiceInterfaceMock_GetGroupsByPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupsByPath'
type GroupServiceInterfaceMock_GetGroupsByPath_Call struct {
	*mock.Call
}

// GetGroupsByPath is a helper method to define mock.On call
//   - handlePath string
//   - limit int
//   - offset int
func (_e *GroupServiceInterfaceMock_Expecter) GetGroupsByPath(handlePath interface{}, limit interface{}, offset interface{}) *GroupServiceInterfaceMock_GetGroupsByPath_Call {
	return &GroupServiceInterfaceMock_GetGroupsByPath_Call{Call: _e.mock.On("GetGroupsByPath", handlePath, limit, offset)}
}

func (_c *GroupServiceInterfaceMock_GetGroupsByPath_Call) Run(run func(handlePath string, limit int, offset int)) *GroupServiceInterfaceMock_GetGroupsByPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *GroupServiceInterfaceMock_GetGroupsByPath_Call) Return(groupListResponse *group.GroupListResponse, serviceError *serviceerror.ServiceError) *GroupServiceInterfaceMock_GetGroupsByPath_Call {
	_c.Call.Return(groupListResponse, serviceError)
	return _c
}

func (_c *GroupServiceInterfaceMock_GetGroupsByPath_Call) RunAndReturn(run func(handlePath string, limit int, offset int) (*group.GroupListResponse, *serviceerror.ServiceError)) *GroupServiceInterfaceMock_GetGroupsByPath_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateGroup provides a mock function for the type GroupServiceInterfaceMock
func (_mock *GroupServiceInterfaceMock) UpdateGroup(groupID string, request group.UpdateGroupRequest) (*group.Group, *serviceerror.ServiceError) {
	ret := _mock.Called(groupID, request)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 *group.Group
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, group.UpdateGroupRequest) (*group.Group, *serviceerror.ServiceError)); ok {
		return returnFunc(groupID, request)
	}
	if returnFunc, ok := ret.Get(0).(func(string, group.UpdateGroupRequest) *group.Group); ok {
		r0 = returnFunc(groupID, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*group.Group)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, group.UpdateGroupRequest) *serviceerror.ServiceError); ok {
		r1 = returnFunc(groupID, request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// GroupServiceInterfaceMock_UpdateGroup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateGroup'
type GroupServiceInterfaceMock_UpdateGroup_Call struct {
	*mock.Call
}

// UpdateGroup is a helper method to define mock.On call
//   - groupID string
//   - request group.UpdateGroupRequest
func (_e *GroupServiceInterfaceMock_Expecter) UpdateGroup(groupID interface{}, request interface{}) *GroupServiceInterfaceMock_UpdateGroup_Call {
	return &GroupServiceInterfaceMock_UpdateGroup_Call{Call: _e.mock.On("UpdateGroup", groupID, request)}
}

func (_c *GroupServiceInterfaceMock_UpdateGroup_Call) Run(run func(groupID string, request group.UpdateGroupRequest)) *GroupServiceInterfaceMock_UpdateGroup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 group.UpdateGroupRequest
		if args[1] != nil {
			arg1 = args[1].(group.UpdateGroupRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *GroupServiceInterfaceMock_UpdateGroup_Call) Return(group1 *group.Group, serviceError *serviceerror.ServiceError) *GroupServiceInterfaceMock_UpdateGroup_Call {
	_c.Call.Return(group1, serviceError)
	return _c
}

func (_c *GroupServiceInterfaceMock_UpdateGroup_Call) RunAndReturn(run func(groupID string, request group.UpdateGroupRequest) (*group.Group, *serviceerror.ServiceError)) *GroupServiceInterfaceMock_UpdateGroup_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateGroupIDs provides a mock function for the type GroupServiceInterfaceMock
func (_mock *GroupServiceInterfaceMock) ValidateGroupIDs(groupIDs []string) *serviceerror.ServiceError {
	ret := _mock.Called(groupIDs)

	if len(ret) == 0 {
		panic("no return value specified for ValidateGroupIDs")
	}

	var r0 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func([]string) *serviceerror.ServiceError); ok {
		r0 = returnFunc(groupIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceerror.ServiceError)
		}
	}
	return r0
}

// GroupServiceInterfaceMock_ValidateGroupIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateGroupIDs'
type GroupServiceInterfaceMock_ValidateGroupIDs_Call struct {
	*mock.Call
}

// ValidateGroupIDs is a helper method to define mock.On call
//   - groupIDs []string
func (_e *GroupServiceInterfaceMock_Expecter) ValidateGroupIDs(groupIDs interface{}) *GroupServiceInterfaceMock_ValidateGroupIDs_Call {
	return &GroupServiceInterfaceMock_ValidateGroupIDs_Call{Call: _e.mock.On("ValidateGroupIDs", groupIDs)}
}

func (_c *GroupServiceInterfaceMock_ValidateGroupIDs_Call) Run(run func(groupIDs []string)) *GroupServiceInterfaceMock_ValidateGroupIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []string
		if args[0] != nil {
			arg0 = args[0].([]string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *GroupServiceInterfaceMock_ValidateGroupIDs_Call) Return(serviceError *serviceerror.ServiceError) *GroupServiceInterfaceMock_ValidateGroupIDs_Call {
	_c.Call.Return(serviceError)
	return _c
}

func (_c *GroupServiceInterfaceMock_ValidateGroupIDs_Call) RunAndReturn(run func(groupIDs []string) *serviceerror.ServiceError) *GroupServiceInterfaceMock_ValidateGroupIDs_Call {
	_c.Call.Return(run)
	return _c
}
