// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package role

import (
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	mock "github.com/stretchr/testify/mock"
)

// NewRoleServiceInterfaceMock creates a new instance of RoleServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoleServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoleServiceInterfaceMock {
	mock := &RoleServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// RoleServiceInterfaceMock is an autogenerated mock type for the RoleServiceInterface type
type RoleServiceInterfaceMock struct {
	mock.Mock
}

type RoleServiceInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RoleServiceInterfaceMock) EXPECT() *RoleServiceInterfaceMock_Expecter {
	return &RoleServiceInterfaceMock_Expecter{mock: &_m.Mock}
}

// AddAssignments provides a mock function for the type RoleServiceInterfaceMock
func (_mock *RoleServiceInterfaceMock) AddAssignments(id string, assignments []RoleAssignment) *serviceerror.ServiceError {
	ret := _mock.Called(id, assignments)

	if len(ret) == 0 {
		panic("no return value specified for AddAssignments")
	}

	var r0 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, []RoleAssignment) *serviceerror.ServiceError); ok {
		r0 = returnFunc(id, assignments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceerror.ServiceError)
		}
	}
	return r0
}

// RoleServiceInterfaceMock_AddAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAssignments'
type RoleServiceInterfaceMock_AddAssignments_Call struct {
	*mock.Call
}

// AddAssignments is a helper method to define mock.On call
//   - id string
//   - assignments []RoleAssignment
func (_e *RoleServiceInterfaceMock_Expecter) AddAssignments(id interface{}, assignments interface{}) *RoleServiceInterfaceMock_AddAssignments_Call {
	return &RoleServiceInterfaceMock_AddAssignments_Call{Call: _e.mock.On("AddAssignments", id, assignments)}
}

func (_c *RoleServiceInterfaceMock_AddAssignments_Call) Run(run func(id string, assignments []RoleAssignment)) *RoleServiceInterfaceMock_AddAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []RoleAssignment
		if args[1] != nil {
			arg1 = args[1].([]RoleAssignment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RoleServiceInterfaceMock_AddAssignments_Call) Return(serviceError *serviceerror.ServiceError) *RoleServiceInterfaceMock_AddAssignments_Call {
	_c.Call.Return(serviceError)
	return _c
}

func (_c *RoleServiceInterfaceMock_AddAssignments_Call) RunAndReturn(run func(id string, assignments []RoleAssignment) *serviceerror.ServiceError) *RoleServiceInterfaceMock_AddAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function for the type RoleServiceInterfaceMock
func (_mock *RoleServiceInterfaceMock) CreateRole(role RoleCreationDetail) (*RoleWithPermissionsAndAssignments, *serviceerror.ServiceError) {
	ret := _mock.Called(role)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 *RoleWithPermissionsAndAssignments
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(RoleCreationDetail) (*RoleWithPermissionsAndAssignments, *serviceerror.ServiceError)); ok {
		return returnFunc(role)
	}
	if returnFunc, ok := ret.Get(0).(func(RoleCreationDetail) *RoleWithPermissionsAndAssignments); ok {
		r0 = returnFunc(role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RoleWithPermissionsAndAssignments)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(RoleCreationDetail) *serviceerror.ServiceError); ok {
		r1 = returnFunc(role)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// RoleServiceInterfaceMock_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type RoleServiceInterfaceMock_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - role RoleCreationDetail
func (_e *RoleServiceInterfaceMock_Expecter) CreateRole(role interface{}) *RoleServiceInterfaceMock_CreateRole_Call {
	return &RoleServiceInterfaceMock_CreateRole_Call{Call: _e.mock.On("CreateRole", role)}
}

func (_c *RoleServiceInterfaceMock_CreateRole_Call) Run(run func(role RoleCreationDetail)) *RoleServiceInterfaceMock_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 RoleCreationDetail
		if args[0] != nil {
			arg0 = args[0].(RoleCreationDetail)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RoleServiceInterfaceMock_CreateRole_Call) Return(roleWithPermissionsAndAssignments *RoleWithPermissionsAndAssignments, serviceError *serviceerror.ServiceError) *RoleServiceInterfaceMock_CreateRole_Call {
	_c.Call.Return(roleWithPermissionsAndAssignments, serviceError)
	return _c
}

func (_c *RoleServiceInterfaceMock_CreateRole_Call) RunAndReturn(run func(role RoleCreationDetail) (*RoleWithPermissionsAndAssignments, *serviceerror.ServiceError)) *RoleServiceInterfaceMock_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function for the type RoleServiceInterfaceMock
func (_mock *RoleServiceInterfaceMock) DeleteRole(id string) *serviceerror.ServiceError {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) *serviceerror.ServiceError); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceerror.ServiceError)
		}
	}
	return r0
}

// RoleServiceInterfaceMock_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type RoleServiceInterfaceMock_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - id string
func (_e *RoleServiceInterfaceMock_Expecter) DeleteRole(id interface{}) *RoleServiceInterfaceMock_DeleteRole_Call {
	return &RoleServiceInterfaceMock_DeleteRole_Call{Call: _e.mock.On("DeleteRole", id)}
}

func (_c *RoleServiceInterfaceMock_DeleteRole_Call) Run(run func(id string)) *RoleServiceInterfaceMock_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RoleServiceInterfaceMock_DeleteRole_Call) Return(serviceError *serviceerror.ServiceError) *RoleServiceInterfaceMock_DeleteRole_Call {
	_c.Call.Return(serviceError)
	return _c
}

func (_c *RoleServiceInterfaceMock_DeleteRole_Call) RunAndReturn(run func(id string) *serviceerror.ServiceError) *RoleServiceInterfaceMock_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleAssignments provides a mock function for the type RoleServiceInterfaceMock
func (_mock *RoleServiceInterfaceMock) GetRoleAssignments(id string, limit int, offset int, includeDisplay bool) (*AssignmentList, *serviceerror.ServiceError) {
	ret := _mock.Called(id, limit, offset, includeDisplay)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleAssignments")
	}

	var r0 *AssignmentList
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, int, int, bool) (*AssignmentList, *serviceerror.ServiceError)); ok {
		return returnFunc(id, limit, offset, includeDisplay)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int, bool) *AssignmentList); ok {
		r0 = returnFunc(id, limit, offset, includeDisplay)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*AssignmentList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int, bool) *serviceerror.ServiceError); ok {
		r1 = returnFunc(id, limit, offset, includeDisplay)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// RoleServiceInterfaceMock_GetRoleAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleAssignments'
type RoleServiceInterfaceMock_GetRoleAssignments_Call struct {
	*mock.Call
}

// GetRoleAssignments is a helper method to define mock.On call
//   - id string
//   - limit int
//   - offset int
//   - includeDisplay bool
func (_e *RoleServiceInterfaceMock_Expecter) GetRoleAssignments(id interface{}, limit interface{}, offset interface{}, includeDisplay interface{}) *RoleServiceInterfaceMock_GetRoleAssignments_Call {
	return &RoleServiceInterfaceMock_GetRoleAssignments_Call{Call: _e.mock.On("GetRoleAssignments", id, limit, offset, includeDisplay)}
}

func (_c *RoleServiceInterfaceMock_GetRoleAssignments_Call) Run(run func(id string, limit int, offset int, includeDisplay bool)) *RoleServiceInterfaceMock_GetRoleAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 bool
		if args[3] != nil {
			arg3 = args[3].(bool)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *RoleServiceInterfaceMock_GetRoleAssignments_Call) Return(assignmentList *AssignmentList, serviceError *serviceerror.ServiceError) *RoleServiceInterfaceMock_GetRoleAssignments_Call {
	_c.Call.Return(assignmentList, serviceError)
	return _c
}

func (_c *RoleServiceInterfaceMock_GetRoleAssignments_Call) RunAndReturn(run func(id string, limit int, offset int, includeDisplay bool) (*AssignmentList, *serviceerror.ServiceError)) *RoleServiceInterfaceMock_GetRoleAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleList provides a mock function for the type RoleServiceInterfaceMock
func (_mock *RoleServiceInterfaceMock) GetRoleList(limit int, offset int) (*RoleList, *serviceerror.ServiceError) {
	ret := _mock.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleList")
	}

	var r0 *RoleList
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(int, int) (*RoleList, *serviceerror.ServiceError)); ok {
		return returnFunc(limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) *RoleList); ok {
		r0 = returnFunc(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RoleList)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) *serviceerror.ServiceError); ok {
		r1 = returnFunc(limit, offset)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// RoleServiceInterfaceMock_GetRoleList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleList'
type RoleServiceInterfaceMock_GetRoleList_Call struct {
	*mock.Call
}

// GetRoleList is a helper method to define mock.On call
//   - limit int
//   - offset int
func (_e *RoleServiceInterfaceMock_Expecter) GetRoleList(limit interface{}, offset interface{}) *RoleServiceInterfaceMock_GetRoleList_Call {
	return &RoleServiceInterfaceMock_GetRoleList_Call{Call: _e.mock.On("GetRoleList", limit, offset)}
}

func (_c *RoleServiceInterfaceMock_GetRoleList_Call) Run(run func(limit int, offset int)) *RoleServiceInterfaceMock_GetRoleList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RoleServiceInterfaceMock_GetRoleList_Call) Return(roleList *RoleList, serviceError *serviceerror.ServiceError) *RoleServiceInterfaceMock_GetRoleList_Call {
	_c.Call.Return(roleList, serviceError)
	return _c
}

func (_c *RoleServiceInterfaceMock_GetRoleList_Call) RunAndReturn(run func(limit int, offset int) (*RoleList, *serviceerror.ServiceError)) *RoleServiceInterfaceMock_GetRoleList_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleWithPermissions provides a mock function for the type RoleServiceInterfaceMock
func (_mock *RoleServiceInterfaceMock) GetRoleWithPermissions(id string) (*RoleWithPermissions, *serviceerror.ServiceError) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleWithPermissions")
	}

	var r0 *RoleWithPermissions
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string) (*RoleWithPermissions, *serviceerror.ServiceError)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *RoleWithPermissions); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RoleWithPermissions)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) *serviceerror.ServiceError); ok {
		r1 = returnFunc(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// RoleServiceInterfaceMock_GetRoleWithPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleWithPermissions'
type RoleServiceInterfaceMock_GetRoleWithPermissions_Call struct {
	*mock.Call
}

// GetRoleWithPermissions is a helper method to define mock.On call
//   - id string
func (_e *RoleServiceInterfaceMock_Expecter) GetRoleWithPermissions(id interface{}) *RoleServiceInterfaceMock_GetRoleWithPermissions_Call {
	return &RoleServiceInterfaceMock_GetRoleWithPermissions_Call{Call: _e.mock.On("GetRoleWithPermissions", id)}
}

func (_c *RoleServiceInterfaceMock_GetRoleWithPermissions_Call) Run(run func(id string)) *RoleServiceInterfaceMock_GetRoleWithPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *RoleServiceInterfaceMock_GetRoleWithPermissions_Call) Return(roleWithPermissions *RoleWithPermissions, serviceError *serviceerror.ServiceError) *RoleServiceInterfaceMock_GetRoleWithPermissions_Call {
	_c.Call.Return(roleWithPermissions, serviceError)
	return _c
}

func (_c *RoleServiceInterfaceMock_GetRoleWithPermissions_Call) RunAndReturn(run func(id string) (*RoleWithPermissions, *serviceerror.ServiceError)) *RoleServiceInterfaceMock_GetRoleWithPermissions_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAssignments provides a mock function for the type RoleServiceInterfaceMock
func (_mock *RoleServiceInterfaceMock) RemoveAssignments(id string, assignments []RoleAssignment) *serviceerror.ServiceError {
	ret := _mock.Called(id, assignments)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAssignments")
	}

	var r0 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, []RoleAssignment) *serviceerror.ServiceError); ok {
		r0 = returnFunc(id, assignments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*serviceerror.ServiceError)
		}
	}
	return r0
}

// RoleServiceInterfaceMock_RemoveAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAssignments'
type RoleServiceInterfaceMock_RemoveAssignments_Call struct {
	*mock.Call
}

// RemoveAssignments is a helper method to define mock.On call
//   - id string
//   - assignments []RoleAssignment
func (_e *RoleServiceInterfaceMock_Expecter) RemoveAssignments(id interface{}, assignments interface{}) *RoleServiceInterfaceMock_RemoveAssignments_Call {
	return &RoleServiceInterfaceMock_RemoveAssignments_Call{Call: _e.mock.On("RemoveAssignments", id, assignments)}
}

func (_c *RoleServiceInterfaceMock_RemoveAssignments_Call) Run(run func(id string, assignments []RoleAssignment)) *RoleServiceInterfaceMock_RemoveAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []RoleAssignment
		if args[1] != nil {
			arg1 = args[1].([]RoleAssignment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RoleServiceInterfaceMock_RemoveAssignments_Call) Return(serviceError *serviceerror.ServiceError) *RoleServiceInterfaceMock_RemoveAssignments_Call {
	_c.Call.Return(serviceError)
	return _c
}

func (_c *RoleServiceInterfaceMock_RemoveAssignments_Call) RunAndReturn(run func(id string, assignments []RoleAssignment) *serviceerror.ServiceError) *RoleServiceInterfaceMock_RemoveAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRoleWithPermissions provides a mock function for the type RoleServiceInterfaceMock
func (_mock *RoleServiceInterfaceMock) UpdateRoleWithPermissions(id string, role RoleUpdateDetail) (*RoleWithPermissions, *serviceerror.ServiceError) {
	ret := _mock.Called(id, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleWithPermissions")
	}

	var r0 *RoleWithPermissions
	var r1 *serviceerror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(string, RoleUpdateDetail) (*RoleWithPermissions, *serviceerror.ServiceError)); ok {
		return returnFunc(id, role)
	}
	if returnFunc, ok := ret.Get(0).(func(string, RoleUpdateDetail) *RoleWithPermissions); ok {
		r0 = returnFunc(id, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RoleWithPermissions)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, RoleUpdateDetail) *serviceerror.ServiceError); ok {
		r1 = returnFunc(id, role)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}
	return r0, r1
}

// RoleServiceInterfaceMock_UpdateRoleWithPermissions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRoleWithPermissions'
type RoleServiceInterfaceMock_UpdateRoleWithPermissions_Call struct {
	*mock.Call
}

// UpdateRoleWithPermissions is a helper method to define mock.On call
//   - id string
//   - role RoleUpdateDetail
func (_e *RoleServiceInterfaceMock_Expecter) UpdateRoleWithPermissions(id interface{}, role interface{}) *RoleServiceInterfaceMock_UpdateRoleWithPermissions_Call {
	return &RoleServiceInterfaceMock_UpdateRoleWithPermissions_Call{Call: _e.mock.On("UpdateRoleWithPermissions", id, role)}
}

func (_c *RoleServiceInterfaceMock_UpdateRoleWithPermissions_Call) Run(run func(id string, role RoleUpdateDetail)) *RoleServiceInterfaceMock_UpdateRoleWithPermissions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 RoleUpdateDetail
		if args[1] != nil {
			arg1 = args[1].(RoleUpdateDetail)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *RoleServiceInterfaceMock_UpdateRoleWithPermissions_Call) Return(roleWithPermissions *RoleWithPermissions, serviceError *serviceerror.ServiceError) *RoleServiceInterfaceMock_UpdateRoleWithPermissions_Call {
	_c.Call.Return(roleWithPermissions, serviceError)
	return _c
}

func (_c *RoleServiceInterfaceMock_UpdateRoleWithPermissions_Call) RunAndReturn(run func(id string, role RoleUpdateDetail) (*RoleWithPermissions, *serviceerror.ServiceError)) *RoleServiceInterfaceMock_UpdateRoleWithPermissions_Call {
	_c.Call.Return(run)
	return _c
}
