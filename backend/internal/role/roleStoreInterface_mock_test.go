// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package role

import (
	mock "github.com/stretchr/testify/mock"
)

// newRoleStoreInterfaceMock creates a new instance of roleStoreInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newRoleStoreInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *roleStoreInterfaceMock {
	mock := &roleStoreInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// roleStoreInterfaceMock is an autogenerated mock type for the roleStoreInterface type
type roleStoreInterfaceMock struct {
	mock.Mock
}

type roleStoreInterfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *roleStoreInterfaceMock) EXPECT() *roleStoreInterfaceMock_Expecter {
	return &roleStoreInterfaceMock_Expecter{mock: &_m.Mock}
}

// AddAssignments provides a mock function for the type roleStoreInterfaceMock
func (_mock *roleStoreInterfaceMock) AddAssignments(id string, assignments []RoleAssignment) error {
	ret := _mock.Called(id, assignments)

	if len(ret) == 0 {
		panic("no return value specified for AddAssignments")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []RoleAssignment) error); ok {
		r0 = returnFunc(id, assignments)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// roleStoreInterfaceMock_AddAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAssignments'
type roleStoreInterfaceMock_AddAssignments_Call struct {
	*mock.Call
}

// AddAssignments is a helper method to define mock.On call
//   - id string
//   - assignments []RoleAssignment
func (_e *roleStoreInterfaceMock_Expecter) AddAssignments(id interface{}, assignments interface{}) *roleStoreInterfaceMock_AddAssignments_Call {
	return &roleStoreInterfaceMock_AddAssignments_Call{Call: _e.mock.On("AddAssignments", id, assignments)}
}

func (_c *roleStoreInterfaceMock_AddAssignments_Call) Run(run func(id string, assignments []RoleAssignment)) *roleStoreInterfaceMock_AddAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []RoleAssignment
		if args[1] != nil {
			arg1 = args[1].([]RoleAssignment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *roleStoreInterfaceMock_AddAssignments_Call) Return(err error) *roleStoreInterfaceMock_AddAssignments_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *roleStoreInterfaceMock_AddAssignments_Call) RunAndReturn(run func(id string, assignments []RoleAssignment) error) *roleStoreInterfaceMock_AddAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// CheckRoleNameExists provides a mock function for the type roleStoreInterfaceMock
func (_mock *roleStoreInterfaceMock) CheckRoleNameExists(ouID string, name string) (bool, error) {
	ret := _mock.Called(ouID, name)

	if len(ret) == 0 {
		panic("no return value specified for CheckRoleNameExists")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return returnFunc(ouID, name)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = returnFunc(ouID, name)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = returnFunc(ouID, name)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// roleStoreInterfaceMock_CheckRoleNameExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckRoleNameExists'
type roleStoreInterfaceMock_CheckRoleNameExists_Call struct {
	*mock.Call
}

// CheckRoleNameExists is a helper method to define mock.On call
//   - ouID string
//   - name string
func (_e *roleStoreInterfaceMock_Expecter) CheckRoleNameExists(ouID interface{}, name interface{}) *roleStoreInterfaceMock_CheckRoleNameExists_Call {
	return &roleStoreInterfaceMock_CheckRoleNameExists_Call{Call: _e.mock.On("CheckRoleNameExists", ouID, name)}
}

func (_c *roleStoreInterfaceMock_CheckRoleNameExists_Call) Run(run func(ouID string, name string)) *roleStoreInterfaceMock_CheckRoleNameExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *roleStoreInterfaceMock_CheckRoleNameExists_Call) Return(b bool, err error) *roleStoreInterfaceMock_CheckRoleNameExists_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *roleStoreInterfaceMock_CheckRoleNameExists_Call) RunAndReturn(run func(ouID string, name string) (bool, error)) *roleStoreInterfaceMock_CheckRoleNameExists_Call {
	_c.Call.Return(run)
	return _c
}

// CheckRoleNameExistsExcludingID provides a mock function for the type roleStoreInterfaceMock
func (_mock *roleStoreInterfaceMock) CheckRoleNameExistsExcludingID(ouID string, name string, excludeRoleID string) (bool, error) {
	ret := _mock.Called(ouID, name, excludeRoleID)

	if len(ret) == 0 {
		panic("no return value specified for CheckRoleNameExistsExcludingID")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string) (bool, error)); ok {
		return returnFunc(ouID, name, excludeRoleID)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, string) bool); ok {
		r0 = returnFunc(ouID, name, excludeRoleID)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = returnFunc(ouID, name, excludeRoleID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// roleStoreInterfaceMock_CheckRoleNameExistsExcludingID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckRoleNameExistsExcludingID'
type roleStoreInterfaceMock_CheckRoleNameExistsExcludingID_Call struct {
	*mock.Call
}

// CheckRoleNameExistsExcludingID is a helper method to define mock.On call
//   - ouID string
//   - name string
//   - excludeRoleID string
func (_e *roleStoreInterfaceMock_Expecter) CheckRoleNameExistsExcludingID(ouID interface{}, name interface{}, excludeRoleID interface{}) *roleStoreInterfaceMock_CheckRoleNameExistsExcludingID_Call {
	return &roleStoreInterfaceMock_CheckRoleNameExistsExcludingID_Call{Call: _e.mock.On("CheckRoleNameExistsExcludingID", ouID, name, excludeRoleID)}
}

func (_c *roleStoreInterfaceMock_CheckRoleNameExistsExcludingID_Call) Run(run func(ouID string, name string, excludeRoleID string)) *roleStoreInterfaceMock_CheckRoleNameExistsExcludingID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *roleStoreInterfaceMock_CheckRoleNameExistsExcludingID_Call) Return(b bool, err error) *roleStoreInterfaceMock_CheckRoleNameExistsExcludingID_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *roleStoreInterfaceMock_CheckRoleNameExistsExcludingID_Call) RunAndReturn(run func(ouID string, name string, excludeRoleID string) (bool, error)) *roleStoreInterfaceMock_CheckRoleNameExistsExcludingID_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function for the type roleStoreInterfaceMock
func (_mock *roleStoreInterfaceMock) CreateRole(id string, role RoleCreationDetail) error {
	ret := _mock.Called(id, role)

	if len(ret) == 0 {
		panic("no return value specified for CreateRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, RoleCreationDetail) error); ok {
		r0 = returnFunc(id, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// roleStoreInterfaceMock_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type roleStoreInterfaceMock_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - id string
//   - role RoleCreationDetail
func (_e *roleStoreInterfaceMock_Expecter) CreateRole(id interface{}, role interface{}) *roleStoreInterfaceMock_CreateRole_Call {
	return &roleStoreInterfaceMock_CreateRole_Call{Call: _e.mock.On("CreateRole", id, role)}
}

func (_c *roleStoreInterfaceMock_CreateRole_Call) Run(run func(id string, role RoleCreationDetail)) *roleStoreInterfaceMock_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 RoleCreationDetail
		if args[1] != nil {
			arg1 = args[1].(RoleCreationDetail)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *roleStoreInterfaceMock_CreateRole_Call) Return(err error) *roleStoreInterfaceMock_CreateRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *roleStoreInterfaceMock_CreateRole_Call) RunAndReturn(run func(id string, role RoleCreationDetail) error) *roleStoreInterfaceMock_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRole provides a mock function for the type roleStoreInterfaceMock
func (_mock *roleStoreInterfaceMock) DeleteRole(id string) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// roleStoreInterfaceMock_DeleteRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRole'
type roleStoreInterfaceMock_DeleteRole_Call struct {
	*mock.Call
}

// DeleteRole is a helper method to define mock.On call
//   - id string
func (_e *roleStoreInterfaceMock_Expecter) DeleteRole(id interface{}) *roleStoreInterfaceMock_DeleteRole_Call {
	return &roleStoreInterfaceMock_DeleteRole_Call{Call: _e.mock.On("DeleteRole", id)}
}

func (_c *roleStoreInterfaceMock_DeleteRole_Call) Run(run func(id string)) *roleStoreInterfaceMock_DeleteRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *roleStoreInterfaceMock_DeleteRole_Call) Return(err error) *roleStoreInterfaceMock_DeleteRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *roleStoreInterfaceMock_DeleteRole_Call) RunAndReturn(run func(id string) error) *roleStoreInterfaceMock_DeleteRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRole provides a mock function for the type roleStoreInterfaceMock
func (_mock *roleStoreInterfaceMock) GetRole(id string) (RoleWithPermissions, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetRole")
	}

	var r0 RoleWithPermissions
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (RoleWithPermissions, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) RoleWithPermissions); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(RoleWithPermissions)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// roleStoreInterfaceMock_GetRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRole'
type roleStoreInterfaceMock_GetRole_Call struct {
	*mock.Call
}

// GetRole is a helper method to define mock.On call
//   - id string
func (_e *roleStoreInterfaceMock_Expecter) GetRole(id interface{}) *roleStoreInterfaceMock_GetRole_Call {
	return &roleStoreInterfaceMock_GetRole_Call{Call: _e.mock.On("GetRole", id)}
}

func (_c *roleStoreInterfaceMock_GetRole_Call) Run(run func(id string)) *roleStoreInterfaceMock_GetRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *roleStoreInterfaceMock_GetRole_Call) Return(roleWithPermissions RoleWithPermissions, err error) *roleStoreInterfaceMock_GetRole_Call {
	_c.Call.Return(roleWithPermissions, err)
	return _c
}

func (_c *roleStoreInterfaceMock_GetRole_Call) RunAndReturn(run func(id string) (RoleWithPermissions, error)) *roleStoreInterfaceMock_GetRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleAssignments provides a mock function for the type roleStoreInterfaceMock
func (_mock *roleStoreInterfaceMock) GetRoleAssignments(id string, limit int, offset int) ([]RoleAssignment, error) {
	ret := _mock.Called(id, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleAssignments")
	}

	var r0 []RoleAssignment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, int, int) ([]RoleAssignment, error)); ok {
		return returnFunc(id, limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(string, int, int) []RoleAssignment); ok {
		r0 = returnFunc(id, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RoleAssignment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = returnFunc(id, limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// roleStoreInterfaceMock_GetRoleAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleAssignments'
type roleStoreInterfaceMock_GetRoleAssignments_Call struct {
	*mock.Call
}

// GetRoleAssignments is a helper method to define mock.On call
//   - id string
//   - limit int
//   - offset int
func (_e *roleStoreInterfaceMock_Expecter) GetRoleAssignments(id interface{}, limit interface{}, offset interface{}) *roleStoreInterfaceMock_GetRoleAssignments_Call {
	return &roleStoreInterfaceMock_GetRoleAssignments_Call{Call: _e.mock.On("GetRoleAssignments", id, limit, offset)}
}

func (_c *roleStoreInterfaceMock_GetRoleAssignments_Call) Run(run func(id string, limit int, offset int)) *roleStoreInterfaceMock_GetRoleAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *roleStoreInterfaceMock_GetRoleAssignments_Call) Return(roleAssignments []RoleAssignment, err error) *roleStoreInterfaceMock_GetRoleAssignments_Call {
	_c.Call.Return(roleAssignments, err)
	return _c
}

func (_c *roleStoreInterfaceMock_GetRoleAssignments_Call) RunAndReturn(run func(id string, limit int, offset int) ([]RoleAssignment, error)) *roleStoreInterfaceMock_GetRoleAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleAssignmentsCount provides a mock function for the type roleStoreInterfaceMock
func (_mock *roleStoreInterfaceMock) GetRoleAssignmentsCount(id string) (int, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleAssignmentsCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (int, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) int); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// roleStoreInterfaceMock_GetRoleAssignmentsCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleAssignmentsCount'
type roleStoreInterfaceMock_GetRoleAssignmentsCount_Call struct {
	*mock.Call
}

// GetRoleAssignmentsCount is a helper method to define mock.On call
//   - id string
func (_e *roleStoreInterfaceMock_Expecter) GetRoleAssignmentsCount(id interface{}) *roleStoreInterfaceMock_GetRoleAssignmentsCount_Call {
	return &roleStoreInterfaceMock_GetRoleAssignmentsCount_Call{Call: _e.mock.On("GetRoleAssignmentsCount", id)}
}

func (_c *roleStoreInterfaceMock_GetRoleAssignmentsCount_Call) Run(run func(id string)) *roleStoreInterfaceMock_GetRoleAssignmentsCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *roleStoreInterfaceMock_GetRoleAssignmentsCount_Call) Return(n int, err error) *roleStoreInterfaceMock_GetRoleAssignmentsCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *roleStoreInterfaceMock_GetRoleAssignmentsCount_Call) RunAndReturn(run func(id string) (int, error)) *roleStoreInterfaceMock_GetRoleAssignmentsCount_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleList provides a mock function for the type roleStoreInterfaceMock
func (_mock *roleStoreInterfaceMock) GetRoleList(limit int, offset int) ([]Role, error) {
	ret := _mock.Called(limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetRoleList")
	}

	var r0 []Role
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int) ([]Role, error)); ok {
		return returnFunc(limit, offset)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int) []Role); ok {
		r0 = returnFunc(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Role)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = returnFunc(limit, offset)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// roleStoreInterfaceMock_GetRoleList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleList'
type roleStoreInterfaceMock_GetRoleList_Call struct {
	*mock.Call
}

// GetRoleList is a helper method to define mock.On call
//   - limit int
//   - offset int
func (_e *roleStoreInterfaceMock_Expecter) GetRoleList(limit interface{}, offset interface{}) *roleStoreInterfaceMock_GetRoleList_Call {
	return &roleStoreInterfaceMock_GetRoleList_Call{Call: _e.mock.On("GetRoleList", limit, offset)}
}

func (_c *roleStoreInterfaceMock_GetRoleList_Call) Run(run func(limit int, offset int)) *roleStoreInterfaceMock_GetRoleList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *roleStoreInterfaceMock_GetRoleList_Call) Return(roles []Role, err error) *roleStoreInterfaceMock_GetRoleList_Call {
	_c.Call.Return(roles, err)
	return _c
}

func (_c *roleStoreInterfaceMock_GetRoleList_Call) RunAndReturn(run func(limit int, offset int) ([]Role, error)) *roleStoreInterfaceMock_GetRoleList_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoleListCount provides a mock function for the type roleStoreInterfaceMock
func (_mock *roleStoreInterfaceMock) GetRoleListCount() (int, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRoleListCount")
	}

	var r0 int
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (int, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() int); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(int)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// roleStoreInterfaceMock_GetRoleListCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoleListCount'
type roleStoreInterfaceMock_GetRoleListCount_Call struct {
	*mock.Call
}

// GetRoleListCount is a helper method to define mock.On call
func (_e *roleStoreInterfaceMock_Expecter) GetRoleListCount() *roleStoreInterfaceMock_GetRoleListCount_Call {
	return &roleStoreInterfaceMock_GetRoleListCount_Call{Call: _e.mock.On("GetRoleListCount")}
}

func (_c *roleStoreInterfaceMock_GetRoleListCount_Call) Run(run func()) *roleStoreInterfaceMock_GetRoleListCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *roleStoreInterfaceMock_GetRoleListCount_Call) Return(n int, err error) *roleStoreInterfaceMock_GetRoleListCount_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *roleStoreInterfaceMock_GetRoleListCount_Call) RunAndReturn(run func() (int, error)) *roleStoreInterfaceMock_GetRoleListCount_Call {
	_c.Call.Return(run)
	return _c
}

// IsRoleExist provides a mock function for the type roleStoreInterfaceMock
func (_mock *roleStoreInterfaceMock) IsRoleExist(id string) (bool, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for IsRoleExist")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(string) bool); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// roleStoreInterfaceMock_IsRoleExist_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsRoleExist'
type roleStoreInterfaceMock_IsRoleExist_Call struct {
	*mock.Call
}

// IsRoleExist is a helper method to define mock.On call
//   - id string
func (_e *roleStoreInterfaceMock_Expecter) IsRoleExist(id interface{}) *roleStoreInterfaceMock_IsRoleExist_Call {
	return &roleStoreInterfaceMock_IsRoleExist_Call{Call: _e.mock.On("IsRoleExist", id)}
}

func (_c *roleStoreInterfaceMock_IsRoleExist_Call) Run(run func(id string)) *roleStoreInterfaceMock_IsRoleExist_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *roleStoreInterfaceMock_IsRoleExist_Call) Return(b bool, err error) *roleStoreInterfaceMock_IsRoleExist_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *roleStoreInterfaceMock_IsRoleExist_Call) RunAndReturn(run func(id string) (bool, error)) *roleStoreInterfaceMock_IsRoleExist_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveAssignments provides a mock function for the type roleStoreInterfaceMock
func (_mock *roleStoreInterfaceMock) RemoveAssignments(id string, assignments []RoleAssignment) error {
	ret := _mock.Called(id, assignments)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAssignments")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []RoleAssignment) error); ok {
		r0 = returnFunc(id, assignments)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// roleStoreInterfaceMock_RemoveAssignments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveAssignments'
type roleStoreInterfaceMock_RemoveAssignments_Call struct {
	*mock.Call
}

// RemoveAssignments is a helper method to define mock.On call
//   - id string
//   - assignments []RoleAssignment
func (_e *roleStoreInterfaceMock_Expecter) RemoveAssignments(id interface{}, assignments interface{}) *roleStoreInterfaceMock_RemoveAssignments_Call {
	return &roleStoreInterfaceMock_RemoveAssignments_Call{Call: _e.mock.On("RemoveAssignments", id, assignments)}
}

func (_c *roleStoreInterfaceMock_RemoveAssignments_Call) Run(run func(id string, assignments []RoleAssignment)) *roleStoreInterfaceMock_RemoveAssignments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []RoleAssignment
		if args[1] != nil {
			arg1 = args[1].([]RoleAssignment)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *roleStoreInterfaceMock_RemoveAssignments_Call) Return(err error) *roleStoreInterfaceMock_RemoveAssignments_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *roleStoreInterfaceMock_RemoveAssignments_Call) RunAndReturn(run func(id string, assignments []RoleAssignment) error) *roleStoreInterfaceMock_RemoveAssignments_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRole provides a mock function for the type roleStoreInterfaceMock
func (_mock *roleStoreInterfaceMock) UpdateRole(id string, role RoleUpdateDetail) error {
	ret := _mock.Called(id, role)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRole")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, RoleUpdateDetail) error); ok {
		r0 = returnFunc(id, role)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// roleStoreInterfaceMock_UpdateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRole'
type roleStoreInterfaceMock_UpdateRole_Call struct {
	*mock.Call
}

// UpdateRole is a helper method to define mock.On call
//   - id string
//   - role RoleUpdateDetail
func (_e *roleStoreInterfaceMock_Expecter) UpdateRole(id interface{}, role interface{}) *roleStoreInterfaceMock_UpdateRole_Call {
	return &roleStoreInterfaceMock_UpdateRole_Call{Call: _e.mock.On("UpdateRole", id, role)}
}

func (_c *roleStoreInterfaceMock_UpdateRole_Call) Run(run func(id string, role RoleUpdateDetail)) *roleStoreInterfaceMock_UpdateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 RoleUpdateDetail
		if args[1] != nil {
			arg1 = args[1].(RoleUpdateDetail)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *roleStoreInterfaceMock_UpdateRole_Call) Return(err error) *roleStoreInterfaceMock_UpdateRole_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *roleStoreInterfaceMock_UpdateRole_Call) RunAndReturn(run func(id string, role RoleUpdateDetail) error) *roleStoreInterfaceMock_UpdateRole_Call {
	_c.Call.Return(run)
	return _c
}
