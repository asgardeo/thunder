// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package cache

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockCacheInterface creates a new instance of MockCacheInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheInterface[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheInterface[T] {
	mock := &MockCacheInterface[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheInterface is an autogenerated mock type for the CacheInterface type
type MockCacheInterface[T any] struct {
	mock.Mock
}

type MockCacheInterface_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *MockCacheInterface[T]) EXPECT() *MockCacheInterface_Expecter[T] {
	return &MockCacheInterface_Expecter[T]{mock: &_m.Mock}
}

// CleanupExpired provides a mock function for the type MockCacheInterface
func (_mock *MockCacheInterface[T]) CleanupExpired() {
	_mock.Called()
	return
}

// MockCacheInterface_CleanupExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CleanupExpired'
type MockCacheInterface_CleanupExpired_Call[T any] struct {
	*mock.Call
}

// CleanupExpired is a helper method to define mock.On call
func (_e *MockCacheInterface_Expecter[T]) CleanupExpired() *MockCacheInterface_CleanupExpired_Call[T] {
	return &MockCacheInterface_CleanupExpired_Call[T]{Call: _e.mock.On("CleanupExpired")}
}

func (_c *MockCacheInterface_CleanupExpired_Call[T]) Run(run func()) *MockCacheInterface_CleanupExpired_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheInterface_CleanupExpired_Call[T]) Return() *MockCacheInterface_CleanupExpired_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockCacheInterface_CleanupExpired_Call[T]) RunAndReturn(run func()) *MockCacheInterface_CleanupExpired_Call[T] {
	_c.Run(run)
	return _c
}

// Clear provides a mock function for the type MockCacheInterface
func (_mock *MockCacheInterface[T]) Clear() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCacheInterface_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type MockCacheInterface_Clear_Call[T any] struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *MockCacheInterface_Expecter[T]) Clear() *MockCacheInterface_Clear_Call[T] {
	return &MockCacheInterface_Clear_Call[T]{Call: _e.mock.On("Clear")}
}

func (_c *MockCacheInterface_Clear_Call[T]) Run(run func()) *MockCacheInterface_Clear_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheInterface_Clear_Call[T]) Return(err error) *MockCacheInterface_Clear_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCacheInterface_Clear_Call[T]) RunAndReturn(run func() error) *MockCacheInterface_Clear_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type MockCacheInterface
func (_mock *MockCacheInterface[T]) Delete(key CacheKey) error {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(CacheKey) error); ok {
		r0 = returnFunc(key)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCacheInterface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCacheInterface_Delete_Call[T any] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - key CacheKey
func (_e *MockCacheInterface_Expecter[T]) Delete(key interface{}) *MockCacheInterface_Delete_Call[T] {
	return &MockCacheInterface_Delete_Call[T]{Call: _e.mock.On("Delete", key)}
}

func (_c *MockCacheInterface_Delete_Call[T]) Run(run func(key CacheKey)) *MockCacheInterface_Delete_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 CacheKey
		if args[0] != nil {
			arg0 = args[0].(CacheKey)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCacheInterface_Delete_Call[T]) Return(err error) *MockCacheInterface_Delete_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCacheInterface_Delete_Call[T]) RunAndReturn(run func(key CacheKey) error) *MockCacheInterface_Delete_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockCacheInterface
func (_mock *MockCacheInterface[T]) Get(key CacheKey) (T, bool) {
	ret := _mock.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 T
	var r1 bool
	if returnFunc, ok := ret.Get(0).(func(CacheKey) (T, bool)); ok {
		return returnFunc(key)
	}
	if returnFunc, ok := ret.Get(0).(func(CacheKey) T); ok {
		r0 = returnFunc(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(CacheKey) bool); ok {
		r1 = returnFunc(key)
	} else {
		r1 = ret.Get(1).(bool)
	}
	return r0, r1
}

// MockCacheInterface_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockCacheInterface_Get_Call[T any] struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - key CacheKey
func (_e *MockCacheInterface_Expecter[T]) Get(key interface{}) *MockCacheInterface_Get_Call[T] {
	return &MockCacheInterface_Get_Call[T]{Call: _e.mock.On("Get", key)}
}

func (_c *MockCacheInterface_Get_Call[T]) Run(run func(key CacheKey)) *MockCacheInterface_Get_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 CacheKey
		if args[0] != nil {
			arg0 = args[0].(CacheKey)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCacheInterface_Get_Call[T]) Return(v T, b bool) *MockCacheInterface_Get_Call[T] {
	_c.Call.Return(v, b)
	return _c
}

func (_c *MockCacheInterface_Get_Call[T]) RunAndReturn(run func(key CacheKey) (T, bool)) *MockCacheInterface_Get_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function for the type MockCacheInterface
func (_mock *MockCacheInterface[T]) GetName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockCacheInterface_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type MockCacheInterface_GetName_Call[T any] struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *MockCacheInterface_Expecter[T]) GetName() *MockCacheInterface_GetName_Call[T] {
	return &MockCacheInterface_GetName_Call[T]{Call: _e.mock.On("GetName")}
}

func (_c *MockCacheInterface_GetName_Call[T]) Run(run func()) *MockCacheInterface_GetName_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheInterface_GetName_Call[T]) Return(s string) *MockCacheInterface_GetName_Call[T] {
	_c.Call.Return(s)
	return _c
}

func (_c *MockCacheInterface_GetName_Call[T]) RunAndReturn(run func() string) *MockCacheInterface_GetName_Call[T] {
	_c.Call.Return(run)
	return _c
}

// IsEnabled provides a mock function for the type MockCacheInterface
func (_mock *MockCacheInterface[T]) IsEnabled() bool {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEnabled")
	}

	var r0 bool
	if returnFunc, ok := ret.Get(0).(func() bool); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(bool)
	}
	return r0
}

// MockCacheInterface_IsEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEnabled'
type MockCacheInterface_IsEnabled_Call[T any] struct {
	*mock.Call
}

// IsEnabled is a helper method to define mock.On call
func (_e *MockCacheInterface_Expecter[T]) IsEnabled() *MockCacheInterface_IsEnabled_Call[T] {
	return &MockCacheInterface_IsEnabled_Call[T]{Call: _e.mock.On("IsEnabled")}
}

func (_c *MockCacheInterface_IsEnabled_Call[T]) Run(run func()) *MockCacheInterface_IsEnabled_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheInterface_IsEnabled_Call[T]) Return(b bool) *MockCacheInterface_IsEnabled_Call[T] {
	_c.Call.Return(b)
	return _c
}

func (_c *MockCacheInterface_IsEnabled_Call[T]) RunAndReturn(run func() bool) *MockCacheInterface_IsEnabled_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function for the type MockCacheInterface
func (_mock *MockCacheInterface[T]) Set(key CacheKey, value T) error {
	ret := _mock.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(CacheKey, T) error); ok {
		r0 = returnFunc(key, value)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCacheInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type MockCacheInterface_Set_Call[T any] struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key CacheKey
//   - value T
func (_e *MockCacheInterface_Expecter[T]) Set(key interface{}, value interface{}) *MockCacheInterface_Set_Call[T] {
	return &MockCacheInterface_Set_Call[T]{Call: _e.mock.On("Set", key, value)}
}

func (_c *MockCacheInterface_Set_Call[T]) Run(run func(key CacheKey, value T)) *MockCacheInterface_Set_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 CacheKey
		if args[0] != nil {
			arg0 = args[0].(CacheKey)
		}
		var arg1 T
		if args[1] != nil {
			arg1 = args[1].(T)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCacheInterface_Set_Call[T]) Return(err error) *MockCacheInterface_Set_Call[T] {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCacheInterface_Set_Call[T]) RunAndReturn(run func(key CacheKey, value T) error) *MockCacheInterface_Set_Call[T] {
	_c.Call.Return(run)
	return _c
}
